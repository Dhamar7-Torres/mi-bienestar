
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Estudiante
 * 
 */
export type Estudiante = $Result.DefaultSelection<Prisma.$EstudiantePayload>
/**
 * Model Coordinador
 * 
 */
export type Coordinador = $Result.DefaultSelection<Prisma.$CoordinadorPayload>
/**
 * Model Evaluacion
 * 
 */
export type Evaluacion = $Result.DefaultSelection<Prisma.$EvaluacionPayload>
/**
 * Model Alerta
 * 
 */
export type Alerta = $Result.DefaultSelection<Prisma.$AlertaPayload>
/**
 * Model PreguntaEvaluacion
 * 
 */
export type PreguntaEvaluacion = $Result.DefaultSelection<Prisma.$PreguntaEvaluacionPayload>
/**
 * Model Recurso
 * 
 */
export type Recurso = $Result.DefaultSelection<Prisma.$RecursoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.estudiante`: Exposes CRUD operations for the **Estudiante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estudiantes
    * const estudiantes = await prisma.estudiante.findMany()
    * ```
    */
  get estudiante(): Prisma.EstudianteDelegate<ExtArgs>;

  /**
   * `prisma.coordinador`: Exposes CRUD operations for the **Coordinador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coordinadors
    * const coordinadors = await prisma.coordinador.findMany()
    * ```
    */
  get coordinador(): Prisma.CoordinadorDelegate<ExtArgs>;

  /**
   * `prisma.evaluacion`: Exposes CRUD operations for the **Evaluacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evaluacions
    * const evaluacions = await prisma.evaluacion.findMany()
    * ```
    */
  get evaluacion(): Prisma.EvaluacionDelegate<ExtArgs>;

  /**
   * `prisma.alerta`: Exposes CRUD operations for the **Alerta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alertas
    * const alertas = await prisma.alerta.findMany()
    * ```
    */
  get alerta(): Prisma.AlertaDelegate<ExtArgs>;

  /**
   * `prisma.preguntaEvaluacion`: Exposes CRUD operations for the **PreguntaEvaluacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreguntaEvaluacions
    * const preguntaEvaluacions = await prisma.preguntaEvaluacion.findMany()
    * ```
    */
  get preguntaEvaluacion(): Prisma.PreguntaEvaluacionDelegate<ExtArgs>;

  /**
   * `prisma.recurso`: Exposes CRUD operations for the **Recurso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recursos
    * const recursos = await prisma.recurso.findMany()
    * ```
    */
  get recurso(): Prisma.RecursoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Estudiante: 'Estudiante',
    Coordinador: 'Coordinador',
    Evaluacion: 'Evaluacion',
    Alerta: 'Alerta',
    PreguntaEvaluacion: 'PreguntaEvaluacion',
    Recurso: 'Recurso'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "estudiante" | "coordinador" | "evaluacion" | "alerta" | "preguntaEvaluacion" | "recurso"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Estudiante: {
        payload: Prisma.$EstudiantePayload<ExtArgs>
        fields: Prisma.EstudianteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstudianteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstudianteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          findFirst: {
            args: Prisma.EstudianteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstudianteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          findMany: {
            args: Prisma.EstudianteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>[]
          }
          create: {
            args: Prisma.EstudianteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          createMany: {
            args: Prisma.EstudianteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstudianteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>[]
          }
          delete: {
            args: Prisma.EstudianteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          update: {
            args: Prisma.EstudianteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          deleteMany: {
            args: Prisma.EstudianteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstudianteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EstudianteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstudiantePayload>
          }
          aggregate: {
            args: Prisma.EstudianteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstudiante>
          }
          groupBy: {
            args: Prisma.EstudianteGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstudianteGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstudianteCountArgs<ExtArgs>
            result: $Utils.Optional<EstudianteCountAggregateOutputType> | number
          }
        }
      }
      Coordinador: {
        payload: Prisma.$CoordinadorPayload<ExtArgs>
        fields: Prisma.CoordinadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoordinadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoordinadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          findFirst: {
            args: Prisma.CoordinadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoordinadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          findMany: {
            args: Prisma.CoordinadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>[]
          }
          create: {
            args: Prisma.CoordinadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          createMany: {
            args: Prisma.CoordinadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoordinadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>[]
          }
          delete: {
            args: Prisma.CoordinadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          update: {
            args: Prisma.CoordinadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          deleteMany: {
            args: Prisma.CoordinadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoordinadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CoordinadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoordinadorPayload>
          }
          aggregate: {
            args: Prisma.CoordinadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoordinador>
          }
          groupBy: {
            args: Prisma.CoordinadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoordinadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoordinadorCountArgs<ExtArgs>
            result: $Utils.Optional<CoordinadorCountAggregateOutputType> | number
          }
        }
      }
      Evaluacion: {
        payload: Prisma.$EvaluacionPayload<ExtArgs>
        fields: Prisma.EvaluacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EvaluacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EvaluacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          findFirst: {
            args: Prisma.EvaluacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EvaluacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          findMany: {
            args: Prisma.EvaluacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>[]
          }
          create: {
            args: Prisma.EvaluacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          createMany: {
            args: Prisma.EvaluacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EvaluacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>[]
          }
          delete: {
            args: Prisma.EvaluacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          update: {
            args: Prisma.EvaluacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          deleteMany: {
            args: Prisma.EvaluacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EvaluacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EvaluacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EvaluacionPayload>
          }
          aggregate: {
            args: Prisma.EvaluacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvaluacion>
          }
          groupBy: {
            args: Prisma.EvaluacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<EvaluacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.EvaluacionCountArgs<ExtArgs>
            result: $Utils.Optional<EvaluacionCountAggregateOutputType> | number
          }
        }
      }
      Alerta: {
        payload: Prisma.$AlertaPayload<ExtArgs>
        fields: Prisma.AlertaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          findFirst: {
            args: Prisma.AlertaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          findMany: {
            args: Prisma.AlertaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>[]
          }
          create: {
            args: Prisma.AlertaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          createMany: {
            args: Prisma.AlertaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>[]
          }
          delete: {
            args: Prisma.AlertaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          update: {
            args: Prisma.AlertaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          deleteMany: {
            args: Prisma.AlertaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertaPayload>
          }
          aggregate: {
            args: Prisma.AlertaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlerta>
          }
          groupBy: {
            args: Prisma.AlertaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertaCountArgs<ExtArgs>
            result: $Utils.Optional<AlertaCountAggregateOutputType> | number
          }
        }
      }
      PreguntaEvaluacion: {
        payload: Prisma.$PreguntaEvaluacionPayload<ExtArgs>
        fields: Prisma.PreguntaEvaluacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreguntaEvaluacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreguntaEvaluacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          findFirst: {
            args: Prisma.PreguntaEvaluacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreguntaEvaluacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          findMany: {
            args: Prisma.PreguntaEvaluacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>[]
          }
          create: {
            args: Prisma.PreguntaEvaluacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          createMany: {
            args: Prisma.PreguntaEvaluacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreguntaEvaluacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>[]
          }
          delete: {
            args: Prisma.PreguntaEvaluacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          update: {
            args: Prisma.PreguntaEvaluacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          deleteMany: {
            args: Prisma.PreguntaEvaluacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreguntaEvaluacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PreguntaEvaluacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreguntaEvaluacionPayload>
          }
          aggregate: {
            args: Prisma.PreguntaEvaluacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreguntaEvaluacion>
          }
          groupBy: {
            args: Prisma.PreguntaEvaluacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreguntaEvaluacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreguntaEvaluacionCountArgs<ExtArgs>
            result: $Utils.Optional<PreguntaEvaluacionCountAggregateOutputType> | number
          }
        }
      }
      Recurso: {
        payload: Prisma.$RecursoPayload<ExtArgs>
        fields: Prisma.RecursoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecursoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecursoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          findFirst: {
            args: Prisma.RecursoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecursoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          findMany: {
            args: Prisma.RecursoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>[]
          }
          create: {
            args: Prisma.RecursoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          createMany: {
            args: Prisma.RecursoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecursoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>[]
          }
          delete: {
            args: Prisma.RecursoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          update: {
            args: Prisma.RecursoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          deleteMany: {
            args: Prisma.RecursoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecursoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecursoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursoPayload>
          }
          aggregate: {
            args: Prisma.RecursoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecurso>
          }
          groupBy: {
            args: Prisma.RecursoGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecursoGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecursoCountArgs<ExtArgs>
            result: $Utils.Optional<RecursoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    coordinador: number
    estudiante: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coordinador?: boolean | UsuarioCountOutputTypeCountCoordinadorArgs
    estudiante?: boolean | UsuarioCountOutputTypeCountEstudianteArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCoordinadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoordinadorWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountEstudianteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstudianteWhereInput
  }


  /**
   * Count Type EstudianteCountOutputType
   */

  export type EstudianteCountOutputType = {
    alertas: number
    evaluaciones: number
  }

  export type EstudianteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alertas?: boolean | EstudianteCountOutputTypeCountAlertasArgs
    evaluaciones?: boolean | EstudianteCountOutputTypeCountEvaluacionesArgs
  }

  // Custom InputTypes
  /**
   * EstudianteCountOutputType without action
   */
  export type EstudianteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstudianteCountOutputType
     */
    select?: EstudianteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstudianteCountOutputType without action
   */
  export type EstudianteCountOutputTypeCountAlertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertaWhereInput
  }

  /**
   * EstudianteCountOutputType without action
   */
  export type EstudianteCountOutputTypeCountEvaluacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvaluacionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombreCompleto: string | null
    correo: string | null
    contrasenaHash: string | null
    tipoUsuario: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombreCompleto: string | null
    correo: string | null
    contrasenaHash: string | null
    tipoUsuario: string | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombreCompleto: number
    correo: number
    contrasenaHash: number
    tipoUsuario: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombreCompleto?: true
    correo?: true
    contrasenaHash?: true
    tipoUsuario?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombreCompleto?: true
    correo?: true
    contrasenaHash?: true
    tipoUsuario?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombreCompleto?: true
    correo?: true
    contrasenaHash?: true
    tipoUsuario?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreCompleto?: boolean
    correo?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    coordinador?: boolean | Usuario$coordinadorArgs<ExtArgs>
    estudiante?: boolean | Usuario$estudianteArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreCompleto?: boolean
    correo?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nombreCompleto?: boolean
    correo?: boolean
    contrasenaHash?: boolean
    tipoUsuario?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coordinador?: boolean | Usuario$coordinadorArgs<ExtArgs>
    estudiante?: boolean | Usuario$estudianteArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      coordinador: Prisma.$CoordinadorPayload<ExtArgs>[]
      estudiante: Prisma.$EstudiantePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombreCompleto: string
      correo: string
      contrasenaHash: string
      tipoUsuario: string
      fechaCreacion: Date | null
      fechaActualizacion: Date | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coordinador<T extends Usuario$coordinadorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$coordinadorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findMany"> | Null>
    estudiante<T extends Usuario$estudianteArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$estudianteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nombreCompleto: FieldRef<"Usuario", 'String'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly contrasenaHash: FieldRef<"Usuario", 'String'>
    readonly tipoUsuario: FieldRef<"Usuario", 'String'>
    readonly fechaCreacion: FieldRef<"Usuario", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.coordinador
   */
  export type Usuario$coordinadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    where?: CoordinadorWhereInput
    orderBy?: CoordinadorOrderByWithRelationInput | CoordinadorOrderByWithRelationInput[]
    cursor?: CoordinadorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoordinadorScalarFieldEnum | CoordinadorScalarFieldEnum[]
  }

  /**
   * Usuario.estudiante
   */
  export type Usuario$estudianteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    where?: EstudianteWhereInput
    orderBy?: EstudianteOrderByWithRelationInput | EstudianteOrderByWithRelationInput[]
    cursor?: EstudianteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EstudianteScalarFieldEnum | EstudianteScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Estudiante
   */

  export type AggregateEstudiante = {
    _count: EstudianteCountAggregateOutputType | null
    _avg: EstudianteAvgAggregateOutputType | null
    _sum: EstudianteSumAggregateOutputType | null
    _min: EstudianteMinAggregateOutputType | null
    _max: EstudianteMaxAggregateOutputType | null
  }

  export type EstudianteAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    semestre: number | null
    nivelEstresActual: number | null
    nivelBurnoutActual: number | null
  }

  export type EstudianteSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    semestre: number | null
    nivelEstresActual: number | null
    nivelBurnoutActual: number | null
  }

  export type EstudianteMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    carrera: string | null
    semestre: number | null
    nivelEstresActual: number | null
    nivelBurnoutActual: number | null
    estadoRiesgo: string | null
    fechaUltimaEvaluacion: Date | null
  }

  export type EstudianteMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    carrera: string | null
    semestre: number | null
    nivelEstresActual: number | null
    nivelBurnoutActual: number | null
    estadoRiesgo: string | null
    fechaUltimaEvaluacion: Date | null
  }

  export type EstudianteCountAggregateOutputType = {
    id: number
    usuarioId: number
    carrera: number
    semestre: number
    nivelEstresActual: number
    nivelBurnoutActual: number
    estadoRiesgo: number
    fechaUltimaEvaluacion: number
    _all: number
  }


  export type EstudianteAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    semestre?: true
    nivelEstresActual?: true
    nivelBurnoutActual?: true
  }

  export type EstudianteSumAggregateInputType = {
    id?: true
    usuarioId?: true
    semestre?: true
    nivelEstresActual?: true
    nivelBurnoutActual?: true
  }

  export type EstudianteMinAggregateInputType = {
    id?: true
    usuarioId?: true
    carrera?: true
    semestre?: true
    nivelEstresActual?: true
    nivelBurnoutActual?: true
    estadoRiesgo?: true
    fechaUltimaEvaluacion?: true
  }

  export type EstudianteMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    carrera?: true
    semestre?: true
    nivelEstresActual?: true
    nivelBurnoutActual?: true
    estadoRiesgo?: true
    fechaUltimaEvaluacion?: true
  }

  export type EstudianteCountAggregateInputType = {
    id?: true
    usuarioId?: true
    carrera?: true
    semestre?: true
    nivelEstresActual?: true
    nivelBurnoutActual?: true
    estadoRiesgo?: true
    fechaUltimaEvaluacion?: true
    _all?: true
  }

  export type EstudianteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estudiante to aggregate.
     */
    where?: EstudianteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estudiantes to fetch.
     */
    orderBy?: EstudianteOrderByWithRelationInput | EstudianteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstudianteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estudiantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estudiantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estudiantes
    **/
    _count?: true | EstudianteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstudianteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstudianteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstudianteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstudianteMaxAggregateInputType
  }

  export type GetEstudianteAggregateType<T extends EstudianteAggregateArgs> = {
        [P in keyof T & keyof AggregateEstudiante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstudiante[P]>
      : GetScalarType<T[P], AggregateEstudiante[P]>
  }




  export type EstudianteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstudianteWhereInput
    orderBy?: EstudianteOrderByWithAggregationInput | EstudianteOrderByWithAggregationInput[]
    by: EstudianteScalarFieldEnum[] | EstudianteScalarFieldEnum
    having?: EstudianteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstudianteCountAggregateInputType | true
    _avg?: EstudianteAvgAggregateInputType
    _sum?: EstudianteSumAggregateInputType
    _min?: EstudianteMinAggregateInputType
    _max?: EstudianteMaxAggregateInputType
  }

  export type EstudianteGroupByOutputType = {
    id: number
    usuarioId: number | null
    carrera: string
    semestre: number
    nivelEstresActual: number | null
    nivelBurnoutActual: number | null
    estadoRiesgo: string | null
    fechaUltimaEvaluacion: Date | null
    _count: EstudianteCountAggregateOutputType | null
    _avg: EstudianteAvgAggregateOutputType | null
    _sum: EstudianteSumAggregateOutputType | null
    _min: EstudianteMinAggregateOutputType | null
    _max: EstudianteMaxAggregateOutputType | null
  }

  type GetEstudianteGroupByPayload<T extends EstudianteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstudianteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstudianteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstudianteGroupByOutputType[P]>
            : GetScalarType<T[P], EstudianteGroupByOutputType[P]>
        }
      >
    >


  export type EstudianteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    carrera?: boolean
    semestre?: boolean
    nivelEstresActual?: boolean
    nivelBurnoutActual?: boolean
    estadoRiesgo?: boolean
    fechaUltimaEvaluacion?: boolean
    alertas?: boolean | Estudiante$alertasArgs<ExtArgs>
    usuario?: boolean | Estudiante$usuarioArgs<ExtArgs>
    evaluaciones?: boolean | Estudiante$evaluacionesArgs<ExtArgs>
    _count?: boolean | EstudianteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estudiante"]>

  export type EstudianteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    carrera?: boolean
    semestre?: boolean
    nivelEstresActual?: boolean
    nivelBurnoutActual?: boolean
    estadoRiesgo?: boolean
    fechaUltimaEvaluacion?: boolean
    usuario?: boolean | Estudiante$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["estudiante"]>

  export type EstudianteSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    carrera?: boolean
    semestre?: boolean
    nivelEstresActual?: boolean
    nivelBurnoutActual?: boolean
    estadoRiesgo?: boolean
    fechaUltimaEvaluacion?: boolean
  }

  export type EstudianteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alertas?: boolean | Estudiante$alertasArgs<ExtArgs>
    usuario?: boolean | Estudiante$usuarioArgs<ExtArgs>
    evaluaciones?: boolean | Estudiante$evaluacionesArgs<ExtArgs>
    _count?: boolean | EstudianteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EstudianteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Estudiante$usuarioArgs<ExtArgs>
  }

  export type $EstudiantePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estudiante"
    objects: {
      alertas: Prisma.$AlertaPayload<ExtArgs>[]
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
      evaluaciones: Prisma.$EvaluacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number | null
      carrera: string
      semestre: number
      nivelEstresActual: number | null
      nivelBurnoutActual: number | null
      estadoRiesgo: string | null
      fechaUltimaEvaluacion: Date | null
    }, ExtArgs["result"]["estudiante"]>
    composites: {}
  }

  type EstudianteGetPayload<S extends boolean | null | undefined | EstudianteDefaultArgs> = $Result.GetResult<Prisma.$EstudiantePayload, S>

  type EstudianteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EstudianteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EstudianteCountAggregateInputType | true
    }

  export interface EstudianteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estudiante'], meta: { name: 'Estudiante' } }
    /**
     * Find zero or one Estudiante that matches the filter.
     * @param {EstudianteFindUniqueArgs} args - Arguments to find a Estudiante
     * @example
     * // Get one Estudiante
     * const estudiante = await prisma.estudiante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstudianteFindUniqueArgs>(args: SelectSubset<T, EstudianteFindUniqueArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Estudiante that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EstudianteFindUniqueOrThrowArgs} args - Arguments to find a Estudiante
     * @example
     * // Get one Estudiante
     * const estudiante = await prisma.estudiante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstudianteFindUniqueOrThrowArgs>(args: SelectSubset<T, EstudianteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Estudiante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteFindFirstArgs} args - Arguments to find a Estudiante
     * @example
     * // Get one Estudiante
     * const estudiante = await prisma.estudiante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstudianteFindFirstArgs>(args?: SelectSubset<T, EstudianteFindFirstArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Estudiante that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteFindFirstOrThrowArgs} args - Arguments to find a Estudiante
     * @example
     * // Get one Estudiante
     * const estudiante = await prisma.estudiante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstudianteFindFirstOrThrowArgs>(args?: SelectSubset<T, EstudianteFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Estudiantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estudiantes
     * const estudiantes = await prisma.estudiante.findMany()
     * 
     * // Get first 10 Estudiantes
     * const estudiantes = await prisma.estudiante.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estudianteWithIdOnly = await prisma.estudiante.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstudianteFindManyArgs>(args?: SelectSubset<T, EstudianteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Estudiante.
     * @param {EstudianteCreateArgs} args - Arguments to create a Estudiante.
     * @example
     * // Create one Estudiante
     * const Estudiante = await prisma.estudiante.create({
     *   data: {
     *     // ... data to create a Estudiante
     *   }
     * })
     * 
     */
    create<T extends EstudianteCreateArgs>(args: SelectSubset<T, EstudianteCreateArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Estudiantes.
     * @param {EstudianteCreateManyArgs} args - Arguments to create many Estudiantes.
     * @example
     * // Create many Estudiantes
     * const estudiante = await prisma.estudiante.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstudianteCreateManyArgs>(args?: SelectSubset<T, EstudianteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Estudiantes and returns the data saved in the database.
     * @param {EstudianteCreateManyAndReturnArgs} args - Arguments to create many Estudiantes.
     * @example
     * // Create many Estudiantes
     * const estudiante = await prisma.estudiante.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Estudiantes and only return the `id`
     * const estudianteWithIdOnly = await prisma.estudiante.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstudianteCreateManyAndReturnArgs>(args?: SelectSubset<T, EstudianteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Estudiante.
     * @param {EstudianteDeleteArgs} args - Arguments to delete one Estudiante.
     * @example
     * // Delete one Estudiante
     * const Estudiante = await prisma.estudiante.delete({
     *   where: {
     *     // ... filter to delete one Estudiante
     *   }
     * })
     * 
     */
    delete<T extends EstudianteDeleteArgs>(args: SelectSubset<T, EstudianteDeleteArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Estudiante.
     * @param {EstudianteUpdateArgs} args - Arguments to update one Estudiante.
     * @example
     * // Update one Estudiante
     * const estudiante = await prisma.estudiante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstudianteUpdateArgs>(args: SelectSubset<T, EstudianteUpdateArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Estudiantes.
     * @param {EstudianteDeleteManyArgs} args - Arguments to filter Estudiantes to delete.
     * @example
     * // Delete a few Estudiantes
     * const { count } = await prisma.estudiante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstudianteDeleteManyArgs>(args?: SelectSubset<T, EstudianteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estudiantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estudiantes
     * const estudiante = await prisma.estudiante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstudianteUpdateManyArgs>(args: SelectSubset<T, EstudianteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estudiante.
     * @param {EstudianteUpsertArgs} args - Arguments to update or create a Estudiante.
     * @example
     * // Update or create a Estudiante
     * const estudiante = await prisma.estudiante.upsert({
     *   create: {
     *     // ... data to create a Estudiante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estudiante we want to update
     *   }
     * })
     */
    upsert<T extends EstudianteUpsertArgs>(args: SelectSubset<T, EstudianteUpsertArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Estudiantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteCountArgs} args - Arguments to filter Estudiantes to count.
     * @example
     * // Count the number of Estudiantes
     * const count = await prisma.estudiante.count({
     *   where: {
     *     // ... the filter for the Estudiantes we want to count
     *   }
     * })
    **/
    count<T extends EstudianteCountArgs>(
      args?: Subset<T, EstudianteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstudianteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estudiante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstudianteAggregateArgs>(args: Subset<T, EstudianteAggregateArgs>): Prisma.PrismaPromise<GetEstudianteAggregateType<T>>

    /**
     * Group by Estudiante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstudianteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstudianteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstudianteGroupByArgs['orderBy'] }
        : { orderBy?: EstudianteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstudianteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstudianteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estudiante model
   */
  readonly fields: EstudianteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estudiante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstudianteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alertas<T extends Estudiante$alertasArgs<ExtArgs> = {}>(args?: Subset<T, Estudiante$alertasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findMany"> | Null>
    usuario<T extends Estudiante$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Estudiante$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    evaluaciones<T extends Estudiante$evaluacionesArgs<ExtArgs> = {}>(args?: Subset<T, Estudiante$evaluacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Estudiante model
   */ 
  interface EstudianteFieldRefs {
    readonly id: FieldRef<"Estudiante", 'Int'>
    readonly usuarioId: FieldRef<"Estudiante", 'Int'>
    readonly carrera: FieldRef<"Estudiante", 'String'>
    readonly semestre: FieldRef<"Estudiante", 'Int'>
    readonly nivelEstresActual: FieldRef<"Estudiante", 'Int'>
    readonly nivelBurnoutActual: FieldRef<"Estudiante", 'Int'>
    readonly estadoRiesgo: FieldRef<"Estudiante", 'String'>
    readonly fechaUltimaEvaluacion: FieldRef<"Estudiante", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Estudiante findUnique
   */
  export type EstudianteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter, which Estudiante to fetch.
     */
    where: EstudianteWhereUniqueInput
  }

  /**
   * Estudiante findUniqueOrThrow
   */
  export type EstudianteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter, which Estudiante to fetch.
     */
    where: EstudianteWhereUniqueInput
  }

  /**
   * Estudiante findFirst
   */
  export type EstudianteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter, which Estudiante to fetch.
     */
    where?: EstudianteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estudiantes to fetch.
     */
    orderBy?: EstudianteOrderByWithRelationInput | EstudianteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estudiantes.
     */
    cursor?: EstudianteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estudiantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estudiantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estudiantes.
     */
    distinct?: EstudianteScalarFieldEnum | EstudianteScalarFieldEnum[]
  }

  /**
   * Estudiante findFirstOrThrow
   */
  export type EstudianteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter, which Estudiante to fetch.
     */
    where?: EstudianteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estudiantes to fetch.
     */
    orderBy?: EstudianteOrderByWithRelationInput | EstudianteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estudiantes.
     */
    cursor?: EstudianteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estudiantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estudiantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estudiantes.
     */
    distinct?: EstudianteScalarFieldEnum | EstudianteScalarFieldEnum[]
  }

  /**
   * Estudiante findMany
   */
  export type EstudianteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter, which Estudiantes to fetch.
     */
    where?: EstudianteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estudiantes to fetch.
     */
    orderBy?: EstudianteOrderByWithRelationInput | EstudianteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estudiantes.
     */
    cursor?: EstudianteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estudiantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estudiantes.
     */
    skip?: number
    distinct?: EstudianteScalarFieldEnum | EstudianteScalarFieldEnum[]
  }

  /**
   * Estudiante create
   */
  export type EstudianteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * The data needed to create a Estudiante.
     */
    data: XOR<EstudianteCreateInput, EstudianteUncheckedCreateInput>
  }

  /**
   * Estudiante createMany
   */
  export type EstudianteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estudiantes.
     */
    data: EstudianteCreateManyInput | EstudianteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estudiante createManyAndReturn
   */
  export type EstudianteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Estudiantes.
     */
    data: EstudianteCreateManyInput | EstudianteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Estudiante update
   */
  export type EstudianteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * The data needed to update a Estudiante.
     */
    data: XOR<EstudianteUpdateInput, EstudianteUncheckedUpdateInput>
    /**
     * Choose, which Estudiante to update.
     */
    where: EstudianteWhereUniqueInput
  }

  /**
   * Estudiante updateMany
   */
  export type EstudianteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estudiantes.
     */
    data: XOR<EstudianteUpdateManyMutationInput, EstudianteUncheckedUpdateManyInput>
    /**
     * Filter which Estudiantes to update
     */
    where?: EstudianteWhereInput
  }

  /**
   * Estudiante upsert
   */
  export type EstudianteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * The filter to search for the Estudiante to update in case it exists.
     */
    where: EstudianteWhereUniqueInput
    /**
     * In case the Estudiante found by the `where` argument doesn't exist, create a new Estudiante with this data.
     */
    create: XOR<EstudianteCreateInput, EstudianteUncheckedCreateInput>
    /**
     * In case the Estudiante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstudianteUpdateInput, EstudianteUncheckedUpdateInput>
  }

  /**
   * Estudiante delete
   */
  export type EstudianteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    /**
     * Filter which Estudiante to delete.
     */
    where: EstudianteWhereUniqueInput
  }

  /**
   * Estudiante deleteMany
   */
  export type EstudianteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estudiantes to delete
     */
    where?: EstudianteWhereInput
  }

  /**
   * Estudiante.alertas
   */
  export type Estudiante$alertasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    where?: AlertaWhereInput
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    cursor?: AlertaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Estudiante.usuario
   */
  export type Estudiante$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Estudiante.evaluaciones
   */
  export type Estudiante$evaluacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    where?: EvaluacionWhereInput
    orderBy?: EvaluacionOrderByWithRelationInput | EvaluacionOrderByWithRelationInput[]
    cursor?: EvaluacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EvaluacionScalarFieldEnum | EvaluacionScalarFieldEnum[]
  }

  /**
   * Estudiante without action
   */
  export type EstudianteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
  }


  /**
   * Model Coordinador
   */

  export type AggregateCoordinador = {
    _count: CoordinadorCountAggregateOutputType | null
    _avg: CoordinadorAvgAggregateOutputType | null
    _sum: CoordinadorSumAggregateOutputType | null
    _min: CoordinadorMinAggregateOutputType | null
    _max: CoordinadorMaxAggregateOutputType | null
  }

  export type CoordinadorAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CoordinadorSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CoordinadorMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    departamento: string | null
  }

  export type CoordinadorMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    departamento: string | null
  }

  export type CoordinadorCountAggregateOutputType = {
    id: number
    usuarioId: number
    departamento: number
    _all: number
  }


  export type CoordinadorAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CoordinadorSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CoordinadorMinAggregateInputType = {
    id?: true
    usuarioId?: true
    departamento?: true
  }

  export type CoordinadorMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    departamento?: true
  }

  export type CoordinadorCountAggregateInputType = {
    id?: true
    usuarioId?: true
    departamento?: true
    _all?: true
  }

  export type CoordinadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordinador to aggregate.
     */
    where?: CoordinadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinadors to fetch.
     */
    orderBy?: CoordinadorOrderByWithRelationInput | CoordinadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoordinadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coordinadors
    **/
    _count?: true | CoordinadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoordinadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoordinadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoordinadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoordinadorMaxAggregateInputType
  }

  export type GetCoordinadorAggregateType<T extends CoordinadorAggregateArgs> = {
        [P in keyof T & keyof AggregateCoordinador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoordinador[P]>
      : GetScalarType<T[P], AggregateCoordinador[P]>
  }




  export type CoordinadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoordinadorWhereInput
    orderBy?: CoordinadorOrderByWithAggregationInput | CoordinadorOrderByWithAggregationInput[]
    by: CoordinadorScalarFieldEnum[] | CoordinadorScalarFieldEnum
    having?: CoordinadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoordinadorCountAggregateInputType | true
    _avg?: CoordinadorAvgAggregateInputType
    _sum?: CoordinadorSumAggregateInputType
    _min?: CoordinadorMinAggregateInputType
    _max?: CoordinadorMaxAggregateInputType
  }

  export type CoordinadorGroupByOutputType = {
    id: number
    usuarioId: number | null
    departamento: string
    _count: CoordinadorCountAggregateOutputType | null
    _avg: CoordinadorAvgAggregateOutputType | null
    _sum: CoordinadorSumAggregateOutputType | null
    _min: CoordinadorMinAggregateOutputType | null
    _max: CoordinadorMaxAggregateOutputType | null
  }

  type GetCoordinadorGroupByPayload<T extends CoordinadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoordinadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoordinadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoordinadorGroupByOutputType[P]>
            : GetScalarType<T[P], CoordinadorGroupByOutputType[P]>
        }
      >
    >


  export type CoordinadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    departamento?: boolean
    usuario?: boolean | Coordinador$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["coordinador"]>

  export type CoordinadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    departamento?: boolean
    usuario?: boolean | Coordinador$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["coordinador"]>

  export type CoordinadorSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    departamento?: boolean
  }

  export type CoordinadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Coordinador$usuarioArgs<ExtArgs>
  }
  export type CoordinadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Coordinador$usuarioArgs<ExtArgs>
  }

  export type $CoordinadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coordinador"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number | null
      departamento: string
    }, ExtArgs["result"]["coordinador"]>
    composites: {}
  }

  type CoordinadorGetPayload<S extends boolean | null | undefined | CoordinadorDefaultArgs> = $Result.GetResult<Prisma.$CoordinadorPayload, S>

  type CoordinadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoordinadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoordinadorCountAggregateInputType | true
    }

  export interface CoordinadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coordinador'], meta: { name: 'Coordinador' } }
    /**
     * Find zero or one Coordinador that matches the filter.
     * @param {CoordinadorFindUniqueArgs} args - Arguments to find a Coordinador
     * @example
     * // Get one Coordinador
     * const coordinador = await prisma.coordinador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoordinadorFindUniqueArgs>(args: SelectSubset<T, CoordinadorFindUniqueArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Coordinador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoordinadorFindUniqueOrThrowArgs} args - Arguments to find a Coordinador
     * @example
     * // Get one Coordinador
     * const coordinador = await prisma.coordinador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoordinadorFindUniqueOrThrowArgs>(args: SelectSubset<T, CoordinadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Coordinador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorFindFirstArgs} args - Arguments to find a Coordinador
     * @example
     * // Get one Coordinador
     * const coordinador = await prisma.coordinador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoordinadorFindFirstArgs>(args?: SelectSubset<T, CoordinadorFindFirstArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Coordinador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorFindFirstOrThrowArgs} args - Arguments to find a Coordinador
     * @example
     * // Get one Coordinador
     * const coordinador = await prisma.coordinador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoordinadorFindFirstOrThrowArgs>(args?: SelectSubset<T, CoordinadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Coordinadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coordinadors
     * const coordinadors = await prisma.coordinador.findMany()
     * 
     * // Get first 10 Coordinadors
     * const coordinadors = await prisma.coordinador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coordinadorWithIdOnly = await prisma.coordinador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoordinadorFindManyArgs>(args?: SelectSubset<T, CoordinadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Coordinador.
     * @param {CoordinadorCreateArgs} args - Arguments to create a Coordinador.
     * @example
     * // Create one Coordinador
     * const Coordinador = await prisma.coordinador.create({
     *   data: {
     *     // ... data to create a Coordinador
     *   }
     * })
     * 
     */
    create<T extends CoordinadorCreateArgs>(args: SelectSubset<T, CoordinadorCreateArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Coordinadors.
     * @param {CoordinadorCreateManyArgs} args - Arguments to create many Coordinadors.
     * @example
     * // Create many Coordinadors
     * const coordinador = await prisma.coordinador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoordinadorCreateManyArgs>(args?: SelectSubset<T, CoordinadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coordinadors and returns the data saved in the database.
     * @param {CoordinadorCreateManyAndReturnArgs} args - Arguments to create many Coordinadors.
     * @example
     * // Create many Coordinadors
     * const coordinador = await prisma.coordinador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coordinadors and only return the `id`
     * const coordinadorWithIdOnly = await prisma.coordinador.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoordinadorCreateManyAndReturnArgs>(args?: SelectSubset<T, CoordinadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Coordinador.
     * @param {CoordinadorDeleteArgs} args - Arguments to delete one Coordinador.
     * @example
     * // Delete one Coordinador
     * const Coordinador = await prisma.coordinador.delete({
     *   where: {
     *     // ... filter to delete one Coordinador
     *   }
     * })
     * 
     */
    delete<T extends CoordinadorDeleteArgs>(args: SelectSubset<T, CoordinadorDeleteArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Coordinador.
     * @param {CoordinadorUpdateArgs} args - Arguments to update one Coordinador.
     * @example
     * // Update one Coordinador
     * const coordinador = await prisma.coordinador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoordinadorUpdateArgs>(args: SelectSubset<T, CoordinadorUpdateArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Coordinadors.
     * @param {CoordinadorDeleteManyArgs} args - Arguments to filter Coordinadors to delete.
     * @example
     * // Delete a few Coordinadors
     * const { count } = await prisma.coordinador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoordinadorDeleteManyArgs>(args?: SelectSubset<T, CoordinadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coordinadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coordinadors
     * const coordinador = await prisma.coordinador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoordinadorUpdateManyArgs>(args: SelectSubset<T, CoordinadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coordinador.
     * @param {CoordinadorUpsertArgs} args - Arguments to update or create a Coordinador.
     * @example
     * // Update or create a Coordinador
     * const coordinador = await prisma.coordinador.upsert({
     *   create: {
     *     // ... data to create a Coordinador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coordinador we want to update
     *   }
     * })
     */
    upsert<T extends CoordinadorUpsertArgs>(args: SelectSubset<T, CoordinadorUpsertArgs<ExtArgs>>): Prisma__CoordinadorClient<$Result.GetResult<Prisma.$CoordinadorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Coordinadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorCountArgs} args - Arguments to filter Coordinadors to count.
     * @example
     * // Count the number of Coordinadors
     * const count = await prisma.coordinador.count({
     *   where: {
     *     // ... the filter for the Coordinadors we want to count
     *   }
     * })
    **/
    count<T extends CoordinadorCountArgs>(
      args?: Subset<T, CoordinadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoordinadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coordinador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoordinadorAggregateArgs>(args: Subset<T, CoordinadorAggregateArgs>): Prisma.PrismaPromise<GetCoordinadorAggregateType<T>>

    /**
     * Group by Coordinador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoordinadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoordinadorGroupByArgs['orderBy'] }
        : { orderBy?: CoordinadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoordinadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoordinadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coordinador model
   */
  readonly fields: CoordinadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coordinador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoordinadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Coordinador$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Coordinador$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Coordinador model
   */ 
  interface CoordinadorFieldRefs {
    readonly id: FieldRef<"Coordinador", 'Int'>
    readonly usuarioId: FieldRef<"Coordinador", 'Int'>
    readonly departamento: FieldRef<"Coordinador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Coordinador findUnique
   */
  export type CoordinadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinador to fetch.
     */
    where: CoordinadorWhereUniqueInput
  }

  /**
   * Coordinador findUniqueOrThrow
   */
  export type CoordinadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinador to fetch.
     */
    where: CoordinadorWhereUniqueInput
  }

  /**
   * Coordinador findFirst
   */
  export type CoordinadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinador to fetch.
     */
    where?: CoordinadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinadors to fetch.
     */
    orderBy?: CoordinadorOrderByWithRelationInput | CoordinadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordinadors.
     */
    cursor?: CoordinadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordinadors.
     */
    distinct?: CoordinadorScalarFieldEnum | CoordinadorScalarFieldEnum[]
  }

  /**
   * Coordinador findFirstOrThrow
   */
  export type CoordinadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinador to fetch.
     */
    where?: CoordinadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinadors to fetch.
     */
    orderBy?: CoordinadorOrderByWithRelationInput | CoordinadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordinadors.
     */
    cursor?: CoordinadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordinadors.
     */
    distinct?: CoordinadorScalarFieldEnum | CoordinadorScalarFieldEnum[]
  }

  /**
   * Coordinador findMany
   */
  export type CoordinadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinadors to fetch.
     */
    where?: CoordinadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinadors to fetch.
     */
    orderBy?: CoordinadorOrderByWithRelationInput | CoordinadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coordinadors.
     */
    cursor?: CoordinadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinadors.
     */
    skip?: number
    distinct?: CoordinadorScalarFieldEnum | CoordinadorScalarFieldEnum[]
  }

  /**
   * Coordinador create
   */
  export type CoordinadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Coordinador.
     */
    data: XOR<CoordinadorCreateInput, CoordinadorUncheckedCreateInput>
  }

  /**
   * Coordinador createMany
   */
  export type CoordinadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coordinadors.
     */
    data: CoordinadorCreateManyInput | CoordinadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coordinador createManyAndReturn
   */
  export type CoordinadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Coordinadors.
     */
    data: CoordinadorCreateManyInput | CoordinadorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Coordinador update
   */
  export type CoordinadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Coordinador.
     */
    data: XOR<CoordinadorUpdateInput, CoordinadorUncheckedUpdateInput>
    /**
     * Choose, which Coordinador to update.
     */
    where: CoordinadorWhereUniqueInput
  }

  /**
   * Coordinador updateMany
   */
  export type CoordinadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coordinadors.
     */
    data: XOR<CoordinadorUpdateManyMutationInput, CoordinadorUncheckedUpdateManyInput>
    /**
     * Filter which Coordinadors to update
     */
    where?: CoordinadorWhereInput
  }

  /**
   * Coordinador upsert
   */
  export type CoordinadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Coordinador to update in case it exists.
     */
    where: CoordinadorWhereUniqueInput
    /**
     * In case the Coordinador found by the `where` argument doesn't exist, create a new Coordinador with this data.
     */
    create: XOR<CoordinadorCreateInput, CoordinadorUncheckedCreateInput>
    /**
     * In case the Coordinador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoordinadorUpdateInput, CoordinadorUncheckedUpdateInput>
  }

  /**
   * Coordinador delete
   */
  export type CoordinadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
    /**
     * Filter which Coordinador to delete.
     */
    where: CoordinadorWhereUniqueInput
  }

  /**
   * Coordinador deleteMany
   */
  export type CoordinadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordinadors to delete
     */
    where?: CoordinadorWhereInput
  }

  /**
   * Coordinador.usuario
   */
  export type Coordinador$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Coordinador without action
   */
  export type CoordinadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinador
     */
    select?: CoordinadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoordinadorInclude<ExtArgs> | null
  }


  /**
   * Model Evaluacion
   */

  export type AggregateEvaluacion = {
    _count: EvaluacionCountAggregateOutputType | null
    _avg: EvaluacionAvgAggregateOutputType | null
    _sum: EvaluacionSumAggregateOutputType | null
    _min: EvaluacionMinAggregateOutputType | null
    _max: EvaluacionMaxAggregateOutputType | null
  }

  export type EvaluacionAvgAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    puntajeEstres: number | null
    puntajeBurnout: number | null
    puntajeTotal: number | null
  }

  export type EvaluacionSumAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    puntajeEstres: number | null
    puntajeBurnout: number | null
    puntajeTotal: number | null
  }

  export type EvaluacionMinAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    puntajeEstres: number | null
    puntajeBurnout: number | null
    puntajeTotal: number | null
    nivelRiesgo: string | null
    fechaEvaluacion: Date | null
  }

  export type EvaluacionMaxAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    puntajeEstres: number | null
    puntajeBurnout: number | null
    puntajeTotal: number | null
    nivelRiesgo: string | null
    fechaEvaluacion: Date | null
  }

  export type EvaluacionCountAggregateOutputType = {
    id: number
    estudianteId: number
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: number
    respuestas: number
    fechaEvaluacion: number
    _all: number
  }


  export type EvaluacionAvgAggregateInputType = {
    id?: true
    estudianteId?: true
    puntajeEstres?: true
    puntajeBurnout?: true
    puntajeTotal?: true
  }

  export type EvaluacionSumAggregateInputType = {
    id?: true
    estudianteId?: true
    puntajeEstres?: true
    puntajeBurnout?: true
    puntajeTotal?: true
  }

  export type EvaluacionMinAggregateInputType = {
    id?: true
    estudianteId?: true
    puntajeEstres?: true
    puntajeBurnout?: true
    puntajeTotal?: true
    nivelRiesgo?: true
    fechaEvaluacion?: true
  }

  export type EvaluacionMaxAggregateInputType = {
    id?: true
    estudianteId?: true
    puntajeEstres?: true
    puntajeBurnout?: true
    puntajeTotal?: true
    nivelRiesgo?: true
    fechaEvaluacion?: true
  }

  export type EvaluacionCountAggregateInputType = {
    id?: true
    estudianteId?: true
    puntajeEstres?: true
    puntajeBurnout?: true
    puntajeTotal?: true
    nivelRiesgo?: true
    respuestas?: true
    fechaEvaluacion?: true
    _all?: true
  }

  export type EvaluacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evaluacion to aggregate.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: EvaluacionOrderByWithRelationInput | EvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Evaluacions
    **/
    _count?: true | EvaluacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EvaluacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EvaluacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EvaluacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EvaluacionMaxAggregateInputType
  }

  export type GetEvaluacionAggregateType<T extends EvaluacionAggregateArgs> = {
        [P in keyof T & keyof AggregateEvaluacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvaluacion[P]>
      : GetScalarType<T[P], AggregateEvaluacion[P]>
  }




  export type EvaluacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EvaluacionWhereInput
    orderBy?: EvaluacionOrderByWithAggregationInput | EvaluacionOrderByWithAggregationInput[]
    by: EvaluacionScalarFieldEnum[] | EvaluacionScalarFieldEnum
    having?: EvaluacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EvaluacionCountAggregateInputType | true
    _avg?: EvaluacionAvgAggregateInputType
    _sum?: EvaluacionSumAggregateInputType
    _min?: EvaluacionMinAggregateInputType
    _max?: EvaluacionMaxAggregateInputType
  }

  export type EvaluacionGroupByOutputType = {
    id: number
    estudianteId: number | null
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonValue
    fechaEvaluacion: Date | null
    _count: EvaluacionCountAggregateOutputType | null
    _avg: EvaluacionAvgAggregateOutputType | null
    _sum: EvaluacionSumAggregateOutputType | null
    _min: EvaluacionMinAggregateOutputType | null
    _max: EvaluacionMaxAggregateOutputType | null
  }

  type GetEvaluacionGroupByPayload<T extends EvaluacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EvaluacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EvaluacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EvaluacionGroupByOutputType[P]>
            : GetScalarType<T[P], EvaluacionGroupByOutputType[P]>
        }
      >
    >


  export type EvaluacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estudianteId?: boolean
    puntajeEstres?: boolean
    puntajeBurnout?: boolean
    puntajeTotal?: boolean
    nivelRiesgo?: boolean
    respuestas?: boolean
    fechaEvaluacion?: boolean
    estudiante?: boolean | Evaluacion$estudianteArgs<ExtArgs>
  }, ExtArgs["result"]["evaluacion"]>

  export type EvaluacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estudianteId?: boolean
    puntajeEstres?: boolean
    puntajeBurnout?: boolean
    puntajeTotal?: boolean
    nivelRiesgo?: boolean
    respuestas?: boolean
    fechaEvaluacion?: boolean
    estudiante?: boolean | Evaluacion$estudianteArgs<ExtArgs>
  }, ExtArgs["result"]["evaluacion"]>

  export type EvaluacionSelectScalar = {
    id?: boolean
    estudianteId?: boolean
    puntajeEstres?: boolean
    puntajeBurnout?: boolean
    puntajeTotal?: boolean
    nivelRiesgo?: boolean
    respuestas?: boolean
    fechaEvaluacion?: boolean
  }

  export type EvaluacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estudiante?: boolean | Evaluacion$estudianteArgs<ExtArgs>
  }
  export type EvaluacionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estudiante?: boolean | Evaluacion$estudianteArgs<ExtArgs>
  }

  export type $EvaluacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evaluacion"
    objects: {
      estudiante: Prisma.$EstudiantePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      estudianteId: number | null
      puntajeEstres: number
      puntajeBurnout: number
      puntajeTotal: number
      nivelRiesgo: string
      respuestas: Prisma.JsonValue
      fechaEvaluacion: Date | null
    }, ExtArgs["result"]["evaluacion"]>
    composites: {}
  }

  type EvaluacionGetPayload<S extends boolean | null | undefined | EvaluacionDefaultArgs> = $Result.GetResult<Prisma.$EvaluacionPayload, S>

  type EvaluacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EvaluacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EvaluacionCountAggregateInputType | true
    }

  export interface EvaluacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evaluacion'], meta: { name: 'Evaluacion' } }
    /**
     * Find zero or one Evaluacion that matches the filter.
     * @param {EvaluacionFindUniqueArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EvaluacionFindUniqueArgs>(args: SelectSubset<T, EvaluacionFindUniqueArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Evaluacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EvaluacionFindUniqueOrThrowArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EvaluacionFindUniqueOrThrowArgs>(args: SelectSubset<T, EvaluacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Evaluacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindFirstArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EvaluacionFindFirstArgs>(args?: SelectSubset<T, EvaluacionFindFirstArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Evaluacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindFirstOrThrowArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EvaluacionFindFirstOrThrowArgs>(args?: SelectSubset<T, EvaluacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Evaluacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Evaluacions
     * const evaluacions = await prisma.evaluacion.findMany()
     * 
     * // Get first 10 Evaluacions
     * const evaluacions = await prisma.evaluacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const evaluacionWithIdOnly = await prisma.evaluacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EvaluacionFindManyArgs>(args?: SelectSubset<T, EvaluacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Evaluacion.
     * @param {EvaluacionCreateArgs} args - Arguments to create a Evaluacion.
     * @example
     * // Create one Evaluacion
     * const Evaluacion = await prisma.evaluacion.create({
     *   data: {
     *     // ... data to create a Evaluacion
     *   }
     * })
     * 
     */
    create<T extends EvaluacionCreateArgs>(args: SelectSubset<T, EvaluacionCreateArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Evaluacions.
     * @param {EvaluacionCreateManyArgs} args - Arguments to create many Evaluacions.
     * @example
     * // Create many Evaluacions
     * const evaluacion = await prisma.evaluacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EvaluacionCreateManyArgs>(args?: SelectSubset<T, EvaluacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Evaluacions and returns the data saved in the database.
     * @param {EvaluacionCreateManyAndReturnArgs} args - Arguments to create many Evaluacions.
     * @example
     * // Create many Evaluacions
     * const evaluacion = await prisma.evaluacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Evaluacions and only return the `id`
     * const evaluacionWithIdOnly = await prisma.evaluacion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EvaluacionCreateManyAndReturnArgs>(args?: SelectSubset<T, EvaluacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Evaluacion.
     * @param {EvaluacionDeleteArgs} args - Arguments to delete one Evaluacion.
     * @example
     * // Delete one Evaluacion
     * const Evaluacion = await prisma.evaluacion.delete({
     *   where: {
     *     // ... filter to delete one Evaluacion
     *   }
     * })
     * 
     */
    delete<T extends EvaluacionDeleteArgs>(args: SelectSubset<T, EvaluacionDeleteArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Evaluacion.
     * @param {EvaluacionUpdateArgs} args - Arguments to update one Evaluacion.
     * @example
     * // Update one Evaluacion
     * const evaluacion = await prisma.evaluacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EvaluacionUpdateArgs>(args: SelectSubset<T, EvaluacionUpdateArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Evaluacions.
     * @param {EvaluacionDeleteManyArgs} args - Arguments to filter Evaluacions to delete.
     * @example
     * // Delete a few Evaluacions
     * const { count } = await prisma.evaluacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EvaluacionDeleteManyArgs>(args?: SelectSubset<T, EvaluacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Evaluacions
     * const evaluacion = await prisma.evaluacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EvaluacionUpdateManyArgs>(args: SelectSubset<T, EvaluacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evaluacion.
     * @param {EvaluacionUpsertArgs} args - Arguments to update or create a Evaluacion.
     * @example
     * // Update or create a Evaluacion
     * const evaluacion = await prisma.evaluacion.upsert({
     *   create: {
     *     // ... data to create a Evaluacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evaluacion we want to update
     *   }
     * })
     */
    upsert<T extends EvaluacionUpsertArgs>(args: SelectSubset<T, EvaluacionUpsertArgs<ExtArgs>>): Prisma__EvaluacionClient<$Result.GetResult<Prisma.$EvaluacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Evaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionCountArgs} args - Arguments to filter Evaluacions to count.
     * @example
     * // Count the number of Evaluacions
     * const count = await prisma.evaluacion.count({
     *   where: {
     *     // ... the filter for the Evaluacions we want to count
     *   }
     * })
    **/
    count<T extends EvaluacionCountArgs>(
      args?: Subset<T, EvaluacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EvaluacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EvaluacionAggregateArgs>(args: Subset<T, EvaluacionAggregateArgs>): Prisma.PrismaPromise<GetEvaluacionAggregateType<T>>

    /**
     * Group by Evaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EvaluacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EvaluacionGroupByArgs['orderBy'] }
        : { orderBy?: EvaluacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EvaluacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvaluacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evaluacion model
   */
  readonly fields: EvaluacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evaluacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EvaluacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    estudiante<T extends Evaluacion$estudianteArgs<ExtArgs> = {}>(args?: Subset<T, Evaluacion$estudianteArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Evaluacion model
   */ 
  interface EvaluacionFieldRefs {
    readonly id: FieldRef<"Evaluacion", 'Int'>
    readonly estudianteId: FieldRef<"Evaluacion", 'Int'>
    readonly puntajeEstres: FieldRef<"Evaluacion", 'Int'>
    readonly puntajeBurnout: FieldRef<"Evaluacion", 'Int'>
    readonly puntajeTotal: FieldRef<"Evaluacion", 'Int'>
    readonly nivelRiesgo: FieldRef<"Evaluacion", 'String'>
    readonly respuestas: FieldRef<"Evaluacion", 'Json'>
    readonly fechaEvaluacion: FieldRef<"Evaluacion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Evaluacion findUnique
   */
  export type EvaluacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where: EvaluacionWhereUniqueInput
  }

  /**
   * Evaluacion findUniqueOrThrow
   */
  export type EvaluacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where: EvaluacionWhereUniqueInput
  }

  /**
   * Evaluacion findFirst
   */
  export type EvaluacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: EvaluacionOrderByWithRelationInput | EvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluacions.
     */
    distinct?: EvaluacionScalarFieldEnum | EvaluacionScalarFieldEnum[]
  }

  /**
   * Evaluacion findFirstOrThrow
   */
  export type EvaluacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: EvaluacionOrderByWithRelationInput | EvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluacions.
     */
    distinct?: EvaluacionScalarFieldEnum | EvaluacionScalarFieldEnum[]
  }

  /**
   * Evaluacion findMany
   */
  export type EvaluacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter, which Evaluacions to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: EvaluacionOrderByWithRelationInput | EvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    distinct?: EvaluacionScalarFieldEnum | EvaluacionScalarFieldEnum[]
  }

  /**
   * Evaluacion create
   */
  export type EvaluacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Evaluacion.
     */
    data: XOR<EvaluacionCreateInput, EvaluacionUncheckedCreateInput>
  }

  /**
   * Evaluacion createMany
   */
  export type EvaluacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Evaluacions.
     */
    data: EvaluacionCreateManyInput | EvaluacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Evaluacion createManyAndReturn
   */
  export type EvaluacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Evaluacions.
     */
    data: EvaluacionCreateManyInput | EvaluacionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evaluacion update
   */
  export type EvaluacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Evaluacion.
     */
    data: XOR<EvaluacionUpdateInput, EvaluacionUncheckedUpdateInput>
    /**
     * Choose, which Evaluacion to update.
     */
    where: EvaluacionWhereUniqueInput
  }

  /**
   * Evaluacion updateMany
   */
  export type EvaluacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Evaluacions.
     */
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyInput>
    /**
     * Filter which Evaluacions to update
     */
    where?: EvaluacionWhereInput
  }

  /**
   * Evaluacion upsert
   */
  export type EvaluacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Evaluacion to update in case it exists.
     */
    where: EvaluacionWhereUniqueInput
    /**
     * In case the Evaluacion found by the `where` argument doesn't exist, create a new Evaluacion with this data.
     */
    create: XOR<EvaluacionCreateInput, EvaluacionUncheckedCreateInput>
    /**
     * In case the Evaluacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EvaluacionUpdateInput, EvaluacionUncheckedUpdateInput>
  }

  /**
   * Evaluacion delete
   */
  export type EvaluacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
    /**
     * Filter which Evaluacion to delete.
     */
    where: EvaluacionWhereUniqueInput
  }

  /**
   * Evaluacion deleteMany
   */
  export type EvaluacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evaluacions to delete
     */
    where?: EvaluacionWhereInput
  }

  /**
   * Evaluacion.estudiante
   */
  export type Evaluacion$estudianteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    where?: EstudianteWhereInput
  }

  /**
   * Evaluacion without action
   */
  export type EvaluacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EvaluacionInclude<ExtArgs> | null
  }


  /**
   * Model Alerta
   */

  export type AggregateAlerta = {
    _count: AlertaCountAggregateOutputType | null
    _avg: AlertaAvgAggregateOutputType | null
    _sum: AlertaSumAggregateOutputType | null
    _min: AlertaMinAggregateOutputType | null
    _max: AlertaMaxAggregateOutputType | null
  }

  export type AlertaAvgAggregateOutputType = {
    id: number | null
    estudianteId: number | null
  }

  export type AlertaSumAggregateOutputType = {
    id: number | null
    estudianteId: number | null
  }

  export type AlertaMinAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    tipoAlerta: string | null
    severidad: string | null
    mensaje: string | null
    estaLeida: boolean | null
    fechaCreacion: Date | null
  }

  export type AlertaMaxAggregateOutputType = {
    id: number | null
    estudianteId: number | null
    tipoAlerta: string | null
    severidad: string | null
    mensaje: string | null
    estaLeida: boolean | null
    fechaCreacion: Date | null
  }

  export type AlertaCountAggregateOutputType = {
    id: number
    estudianteId: number
    tipoAlerta: number
    severidad: number
    mensaje: number
    estaLeida: number
    fechaCreacion: number
    _all: number
  }


  export type AlertaAvgAggregateInputType = {
    id?: true
    estudianteId?: true
  }

  export type AlertaSumAggregateInputType = {
    id?: true
    estudianteId?: true
  }

  export type AlertaMinAggregateInputType = {
    id?: true
    estudianteId?: true
    tipoAlerta?: true
    severidad?: true
    mensaje?: true
    estaLeida?: true
    fechaCreacion?: true
  }

  export type AlertaMaxAggregateInputType = {
    id?: true
    estudianteId?: true
    tipoAlerta?: true
    severidad?: true
    mensaje?: true
    estaLeida?: true
    fechaCreacion?: true
  }

  export type AlertaCountAggregateInputType = {
    id?: true
    estudianteId?: true
    tipoAlerta?: true
    severidad?: true
    mensaje?: true
    estaLeida?: true
    fechaCreacion?: true
    _all?: true
  }

  export type AlertaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerta to aggregate.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alertas
    **/
    _count?: true | AlertaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlertaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlertaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertaMaxAggregateInputType
  }

  export type GetAlertaAggregateType<T extends AlertaAggregateArgs> = {
        [P in keyof T & keyof AggregateAlerta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlerta[P]>
      : GetScalarType<T[P], AggregateAlerta[P]>
  }




  export type AlertaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertaWhereInput
    orderBy?: AlertaOrderByWithAggregationInput | AlertaOrderByWithAggregationInput[]
    by: AlertaScalarFieldEnum[] | AlertaScalarFieldEnum
    having?: AlertaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertaCountAggregateInputType | true
    _avg?: AlertaAvgAggregateInputType
    _sum?: AlertaSumAggregateInputType
    _min?: AlertaMinAggregateInputType
    _max?: AlertaMaxAggregateInputType
  }

  export type AlertaGroupByOutputType = {
    id: number
    estudianteId: number | null
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida: boolean | null
    fechaCreacion: Date | null
    _count: AlertaCountAggregateOutputType | null
    _avg: AlertaAvgAggregateOutputType | null
    _sum: AlertaSumAggregateOutputType | null
    _min: AlertaMinAggregateOutputType | null
    _max: AlertaMaxAggregateOutputType | null
  }

  type GetAlertaGroupByPayload<T extends AlertaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertaGroupByOutputType[P]>
            : GetScalarType<T[P], AlertaGroupByOutputType[P]>
        }
      >
    >


  export type AlertaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estudianteId?: boolean
    tipoAlerta?: boolean
    severidad?: boolean
    mensaje?: boolean
    estaLeida?: boolean
    fechaCreacion?: boolean
    estudiante?: boolean | Alerta$estudianteArgs<ExtArgs>
  }, ExtArgs["result"]["alerta"]>

  export type AlertaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estudianteId?: boolean
    tipoAlerta?: boolean
    severidad?: boolean
    mensaje?: boolean
    estaLeida?: boolean
    fechaCreacion?: boolean
    estudiante?: boolean | Alerta$estudianteArgs<ExtArgs>
  }, ExtArgs["result"]["alerta"]>

  export type AlertaSelectScalar = {
    id?: boolean
    estudianteId?: boolean
    tipoAlerta?: boolean
    severidad?: boolean
    mensaje?: boolean
    estaLeida?: boolean
    fechaCreacion?: boolean
  }

  export type AlertaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estudiante?: boolean | Alerta$estudianteArgs<ExtArgs>
  }
  export type AlertaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estudiante?: boolean | Alerta$estudianteArgs<ExtArgs>
  }

  export type $AlertaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alerta"
    objects: {
      estudiante: Prisma.$EstudiantePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      estudianteId: number | null
      tipoAlerta: string
      severidad: string
      mensaje: string
      estaLeida: boolean | null
      fechaCreacion: Date | null
    }, ExtArgs["result"]["alerta"]>
    composites: {}
  }

  type AlertaGetPayload<S extends boolean | null | undefined | AlertaDefaultArgs> = $Result.GetResult<Prisma.$AlertaPayload, S>

  type AlertaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertaCountAggregateInputType | true
    }

  export interface AlertaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alerta'], meta: { name: 'Alerta' } }
    /**
     * Find zero or one Alerta that matches the filter.
     * @param {AlertaFindUniqueArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertaFindUniqueArgs>(args: SelectSubset<T, AlertaFindUniqueArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alerta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertaFindUniqueOrThrowArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertaFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alerta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindFirstArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertaFindFirstArgs>(args?: SelectSubset<T, AlertaFindFirstArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alerta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindFirstOrThrowArgs} args - Arguments to find a Alerta
     * @example
     * // Get one Alerta
     * const alerta = await prisma.alerta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertaFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alertas
     * const alertas = await prisma.alerta.findMany()
     * 
     * // Get first 10 Alertas
     * const alertas = await prisma.alerta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertaWithIdOnly = await prisma.alerta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertaFindManyArgs>(args?: SelectSubset<T, AlertaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alerta.
     * @param {AlertaCreateArgs} args - Arguments to create a Alerta.
     * @example
     * // Create one Alerta
     * const Alerta = await prisma.alerta.create({
     *   data: {
     *     // ... data to create a Alerta
     *   }
     * })
     * 
     */
    create<T extends AlertaCreateArgs>(args: SelectSubset<T, AlertaCreateArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alertas.
     * @param {AlertaCreateManyArgs} args - Arguments to create many Alertas.
     * @example
     * // Create many Alertas
     * const alerta = await prisma.alerta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertaCreateManyArgs>(args?: SelectSubset<T, AlertaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alertas and returns the data saved in the database.
     * @param {AlertaCreateManyAndReturnArgs} args - Arguments to create many Alertas.
     * @example
     * // Create many Alertas
     * const alerta = await prisma.alerta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alertas and only return the `id`
     * const alertaWithIdOnly = await prisma.alerta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertaCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alerta.
     * @param {AlertaDeleteArgs} args - Arguments to delete one Alerta.
     * @example
     * // Delete one Alerta
     * const Alerta = await prisma.alerta.delete({
     *   where: {
     *     // ... filter to delete one Alerta
     *   }
     * })
     * 
     */
    delete<T extends AlertaDeleteArgs>(args: SelectSubset<T, AlertaDeleteArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alerta.
     * @param {AlertaUpdateArgs} args - Arguments to update one Alerta.
     * @example
     * // Update one Alerta
     * const alerta = await prisma.alerta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertaUpdateArgs>(args: SelectSubset<T, AlertaUpdateArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alertas.
     * @param {AlertaDeleteManyArgs} args - Arguments to filter Alertas to delete.
     * @example
     * // Delete a few Alertas
     * const { count } = await prisma.alerta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertaDeleteManyArgs>(args?: SelectSubset<T, AlertaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alertas
     * const alerta = await prisma.alerta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertaUpdateManyArgs>(args: SelectSubset<T, AlertaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alerta.
     * @param {AlertaUpsertArgs} args - Arguments to update or create a Alerta.
     * @example
     * // Update or create a Alerta
     * const alerta = await prisma.alerta.upsert({
     *   create: {
     *     // ... data to create a Alerta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alerta we want to update
     *   }
     * })
     */
    upsert<T extends AlertaUpsertArgs>(args: SelectSubset<T, AlertaUpsertArgs<ExtArgs>>): Prisma__AlertaClient<$Result.GetResult<Prisma.$AlertaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaCountArgs} args - Arguments to filter Alertas to count.
     * @example
     * // Count the number of Alertas
     * const count = await prisma.alerta.count({
     *   where: {
     *     // ... the filter for the Alertas we want to count
     *   }
     * })
    **/
    count<T extends AlertaCountArgs>(
      args?: Subset<T, AlertaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alerta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertaAggregateArgs>(args: Subset<T, AlertaAggregateArgs>): Prisma.PrismaPromise<GetAlertaAggregateType<T>>

    /**
     * Group by Alerta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertaGroupByArgs['orderBy'] }
        : { orderBy?: AlertaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alerta model
   */
  readonly fields: AlertaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alerta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    estudiante<T extends Alerta$estudianteArgs<ExtArgs> = {}>(args?: Subset<T, Alerta$estudianteArgs<ExtArgs>>): Prisma__EstudianteClient<$Result.GetResult<Prisma.$EstudiantePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alerta model
   */ 
  interface AlertaFieldRefs {
    readonly id: FieldRef<"Alerta", 'Int'>
    readonly estudianteId: FieldRef<"Alerta", 'Int'>
    readonly tipoAlerta: FieldRef<"Alerta", 'String'>
    readonly severidad: FieldRef<"Alerta", 'String'>
    readonly mensaje: FieldRef<"Alerta", 'String'>
    readonly estaLeida: FieldRef<"Alerta", 'Boolean'>
    readonly fechaCreacion: FieldRef<"Alerta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alerta findUnique
   */
  export type AlertaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta findUniqueOrThrow
   */
  export type AlertaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta findFirst
   */
  export type AlertaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alertas.
     */
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta findFirstOrThrow
   */
  export type AlertaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alerta to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alertas.
     */
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta findMany
   */
  export type AlertaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter, which Alertas to fetch.
     */
    where?: AlertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alertas to fetch.
     */
    orderBy?: AlertaOrderByWithRelationInput | AlertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alertas.
     */
    cursor?: AlertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alertas.
     */
    skip?: number
    distinct?: AlertaScalarFieldEnum | AlertaScalarFieldEnum[]
  }

  /**
   * Alerta create
   */
  export type AlertaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The data needed to create a Alerta.
     */
    data: XOR<AlertaCreateInput, AlertaUncheckedCreateInput>
  }

  /**
   * Alerta createMany
   */
  export type AlertaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alertas.
     */
    data: AlertaCreateManyInput | AlertaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alerta createManyAndReturn
   */
  export type AlertaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alertas.
     */
    data: AlertaCreateManyInput | AlertaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alerta update
   */
  export type AlertaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The data needed to update a Alerta.
     */
    data: XOR<AlertaUpdateInput, AlertaUncheckedUpdateInput>
    /**
     * Choose, which Alerta to update.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta updateMany
   */
  export type AlertaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alertas.
     */
    data: XOR<AlertaUpdateManyMutationInput, AlertaUncheckedUpdateManyInput>
    /**
     * Filter which Alertas to update
     */
    where?: AlertaWhereInput
  }

  /**
   * Alerta upsert
   */
  export type AlertaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * The filter to search for the Alerta to update in case it exists.
     */
    where: AlertaWhereUniqueInput
    /**
     * In case the Alerta found by the `where` argument doesn't exist, create a new Alerta with this data.
     */
    create: XOR<AlertaCreateInput, AlertaUncheckedCreateInput>
    /**
     * In case the Alerta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertaUpdateInput, AlertaUncheckedUpdateInput>
  }

  /**
   * Alerta delete
   */
  export type AlertaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
    /**
     * Filter which Alerta to delete.
     */
    where: AlertaWhereUniqueInput
  }

  /**
   * Alerta deleteMany
   */
  export type AlertaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alertas to delete
     */
    where?: AlertaWhereInput
  }

  /**
   * Alerta.estudiante
   */
  export type Alerta$estudianteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estudiante
     */
    select?: EstudianteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstudianteInclude<ExtArgs> | null
    where?: EstudianteWhereInput
  }

  /**
   * Alerta without action
   */
  export type AlertaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alerta
     */
    select?: AlertaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertaInclude<ExtArgs> | null
  }


  /**
   * Model PreguntaEvaluacion
   */

  export type AggregatePreguntaEvaluacion = {
    _count: PreguntaEvaluacionCountAggregateOutputType | null
    _avg: PreguntaEvaluacionAvgAggregateOutputType | null
    _sum: PreguntaEvaluacionSumAggregateOutputType | null
    _min: PreguntaEvaluacionMinAggregateOutputType | null
    _max: PreguntaEvaluacionMaxAggregateOutputType | null
  }

  export type PreguntaEvaluacionAvgAggregateOutputType = {
    id: number | null
    peso: number | null
    orden: number | null
  }

  export type PreguntaEvaluacionSumAggregateOutputType = {
    id: number | null
    peso: number | null
    orden: number | null
  }

  export type PreguntaEvaluacionMinAggregateOutputType = {
    id: number | null
    textoPregunta: string | null
    categoria: string | null
    peso: number | null
    orden: number | null
    activa: boolean | null
  }

  export type PreguntaEvaluacionMaxAggregateOutputType = {
    id: number | null
    textoPregunta: string | null
    categoria: string | null
    peso: number | null
    orden: number | null
    activa: boolean | null
  }

  export type PreguntaEvaluacionCountAggregateOutputType = {
    id: number
    textoPregunta: number
    categoria: number
    peso: number
    orden: number
    activa: number
    _all: number
  }


  export type PreguntaEvaluacionAvgAggregateInputType = {
    id?: true
    peso?: true
    orden?: true
  }

  export type PreguntaEvaluacionSumAggregateInputType = {
    id?: true
    peso?: true
    orden?: true
  }

  export type PreguntaEvaluacionMinAggregateInputType = {
    id?: true
    textoPregunta?: true
    categoria?: true
    peso?: true
    orden?: true
    activa?: true
  }

  export type PreguntaEvaluacionMaxAggregateInputType = {
    id?: true
    textoPregunta?: true
    categoria?: true
    peso?: true
    orden?: true
    activa?: true
  }

  export type PreguntaEvaluacionCountAggregateInputType = {
    id?: true
    textoPregunta?: true
    categoria?: true
    peso?: true
    orden?: true
    activa?: true
    _all?: true
  }

  export type PreguntaEvaluacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreguntaEvaluacion to aggregate.
     */
    where?: PreguntaEvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreguntaEvaluacions to fetch.
     */
    orderBy?: PreguntaEvaluacionOrderByWithRelationInput | PreguntaEvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreguntaEvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreguntaEvaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreguntaEvaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreguntaEvaluacions
    **/
    _count?: true | PreguntaEvaluacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreguntaEvaluacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreguntaEvaluacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreguntaEvaluacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreguntaEvaluacionMaxAggregateInputType
  }

  export type GetPreguntaEvaluacionAggregateType<T extends PreguntaEvaluacionAggregateArgs> = {
        [P in keyof T & keyof AggregatePreguntaEvaluacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreguntaEvaluacion[P]>
      : GetScalarType<T[P], AggregatePreguntaEvaluacion[P]>
  }




  export type PreguntaEvaluacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreguntaEvaluacionWhereInput
    orderBy?: PreguntaEvaluacionOrderByWithAggregationInput | PreguntaEvaluacionOrderByWithAggregationInput[]
    by: PreguntaEvaluacionScalarFieldEnum[] | PreguntaEvaluacionScalarFieldEnum
    having?: PreguntaEvaluacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreguntaEvaluacionCountAggregateInputType | true
    _avg?: PreguntaEvaluacionAvgAggregateInputType
    _sum?: PreguntaEvaluacionSumAggregateInputType
    _min?: PreguntaEvaluacionMinAggregateInputType
    _max?: PreguntaEvaluacionMaxAggregateInputType
  }

  export type PreguntaEvaluacionGroupByOutputType = {
    id: number
    textoPregunta: string
    categoria: string
    peso: number | null
    orden: number | null
    activa: boolean | null
    _count: PreguntaEvaluacionCountAggregateOutputType | null
    _avg: PreguntaEvaluacionAvgAggregateOutputType | null
    _sum: PreguntaEvaluacionSumAggregateOutputType | null
    _min: PreguntaEvaluacionMinAggregateOutputType | null
    _max: PreguntaEvaluacionMaxAggregateOutputType | null
  }

  type GetPreguntaEvaluacionGroupByPayload<T extends PreguntaEvaluacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreguntaEvaluacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreguntaEvaluacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreguntaEvaluacionGroupByOutputType[P]>
            : GetScalarType<T[P], PreguntaEvaluacionGroupByOutputType[P]>
        }
      >
    >


  export type PreguntaEvaluacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    textoPregunta?: boolean
    categoria?: boolean
    peso?: boolean
    orden?: boolean
    activa?: boolean
  }, ExtArgs["result"]["preguntaEvaluacion"]>

  export type PreguntaEvaluacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    textoPregunta?: boolean
    categoria?: boolean
    peso?: boolean
    orden?: boolean
    activa?: boolean
  }, ExtArgs["result"]["preguntaEvaluacion"]>

  export type PreguntaEvaluacionSelectScalar = {
    id?: boolean
    textoPregunta?: boolean
    categoria?: boolean
    peso?: boolean
    orden?: boolean
    activa?: boolean
  }


  export type $PreguntaEvaluacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreguntaEvaluacion"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      textoPregunta: string
      categoria: string
      peso: number | null
      orden: number | null
      activa: boolean | null
    }, ExtArgs["result"]["preguntaEvaluacion"]>
    composites: {}
  }

  type PreguntaEvaluacionGetPayload<S extends boolean | null | undefined | PreguntaEvaluacionDefaultArgs> = $Result.GetResult<Prisma.$PreguntaEvaluacionPayload, S>

  type PreguntaEvaluacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PreguntaEvaluacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PreguntaEvaluacionCountAggregateInputType | true
    }

  export interface PreguntaEvaluacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreguntaEvaluacion'], meta: { name: 'PreguntaEvaluacion' } }
    /**
     * Find zero or one PreguntaEvaluacion that matches the filter.
     * @param {PreguntaEvaluacionFindUniqueArgs} args - Arguments to find a PreguntaEvaluacion
     * @example
     * // Get one PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreguntaEvaluacionFindUniqueArgs>(args: SelectSubset<T, PreguntaEvaluacionFindUniqueArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PreguntaEvaluacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PreguntaEvaluacionFindUniqueOrThrowArgs} args - Arguments to find a PreguntaEvaluacion
     * @example
     * // Get one PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreguntaEvaluacionFindUniqueOrThrowArgs>(args: SelectSubset<T, PreguntaEvaluacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PreguntaEvaluacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionFindFirstArgs} args - Arguments to find a PreguntaEvaluacion
     * @example
     * // Get one PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreguntaEvaluacionFindFirstArgs>(args?: SelectSubset<T, PreguntaEvaluacionFindFirstArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PreguntaEvaluacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionFindFirstOrThrowArgs} args - Arguments to find a PreguntaEvaluacion
     * @example
     * // Get one PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreguntaEvaluacionFindFirstOrThrowArgs>(args?: SelectSubset<T, PreguntaEvaluacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PreguntaEvaluacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreguntaEvaluacions
     * const preguntaEvaluacions = await prisma.preguntaEvaluacion.findMany()
     * 
     * // Get first 10 PreguntaEvaluacions
     * const preguntaEvaluacions = await prisma.preguntaEvaluacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preguntaEvaluacionWithIdOnly = await prisma.preguntaEvaluacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreguntaEvaluacionFindManyArgs>(args?: SelectSubset<T, PreguntaEvaluacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PreguntaEvaluacion.
     * @param {PreguntaEvaluacionCreateArgs} args - Arguments to create a PreguntaEvaluacion.
     * @example
     * // Create one PreguntaEvaluacion
     * const PreguntaEvaluacion = await prisma.preguntaEvaluacion.create({
     *   data: {
     *     // ... data to create a PreguntaEvaluacion
     *   }
     * })
     * 
     */
    create<T extends PreguntaEvaluacionCreateArgs>(args: SelectSubset<T, PreguntaEvaluacionCreateArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PreguntaEvaluacions.
     * @param {PreguntaEvaluacionCreateManyArgs} args - Arguments to create many PreguntaEvaluacions.
     * @example
     * // Create many PreguntaEvaluacions
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreguntaEvaluacionCreateManyArgs>(args?: SelectSubset<T, PreguntaEvaluacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreguntaEvaluacions and returns the data saved in the database.
     * @param {PreguntaEvaluacionCreateManyAndReturnArgs} args - Arguments to create many PreguntaEvaluacions.
     * @example
     * // Create many PreguntaEvaluacions
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreguntaEvaluacions and only return the `id`
     * const preguntaEvaluacionWithIdOnly = await prisma.preguntaEvaluacion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreguntaEvaluacionCreateManyAndReturnArgs>(args?: SelectSubset<T, PreguntaEvaluacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PreguntaEvaluacion.
     * @param {PreguntaEvaluacionDeleteArgs} args - Arguments to delete one PreguntaEvaluacion.
     * @example
     * // Delete one PreguntaEvaluacion
     * const PreguntaEvaluacion = await prisma.preguntaEvaluacion.delete({
     *   where: {
     *     // ... filter to delete one PreguntaEvaluacion
     *   }
     * })
     * 
     */
    delete<T extends PreguntaEvaluacionDeleteArgs>(args: SelectSubset<T, PreguntaEvaluacionDeleteArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PreguntaEvaluacion.
     * @param {PreguntaEvaluacionUpdateArgs} args - Arguments to update one PreguntaEvaluacion.
     * @example
     * // Update one PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreguntaEvaluacionUpdateArgs>(args: SelectSubset<T, PreguntaEvaluacionUpdateArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PreguntaEvaluacions.
     * @param {PreguntaEvaluacionDeleteManyArgs} args - Arguments to filter PreguntaEvaluacions to delete.
     * @example
     * // Delete a few PreguntaEvaluacions
     * const { count } = await prisma.preguntaEvaluacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreguntaEvaluacionDeleteManyArgs>(args?: SelectSubset<T, PreguntaEvaluacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreguntaEvaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreguntaEvaluacions
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreguntaEvaluacionUpdateManyArgs>(args: SelectSubset<T, PreguntaEvaluacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PreguntaEvaluacion.
     * @param {PreguntaEvaluacionUpsertArgs} args - Arguments to update or create a PreguntaEvaluacion.
     * @example
     * // Update or create a PreguntaEvaluacion
     * const preguntaEvaluacion = await prisma.preguntaEvaluacion.upsert({
     *   create: {
     *     // ... data to create a PreguntaEvaluacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreguntaEvaluacion we want to update
     *   }
     * })
     */
    upsert<T extends PreguntaEvaluacionUpsertArgs>(args: SelectSubset<T, PreguntaEvaluacionUpsertArgs<ExtArgs>>): Prisma__PreguntaEvaluacionClient<$Result.GetResult<Prisma.$PreguntaEvaluacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PreguntaEvaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionCountArgs} args - Arguments to filter PreguntaEvaluacions to count.
     * @example
     * // Count the number of PreguntaEvaluacions
     * const count = await prisma.preguntaEvaluacion.count({
     *   where: {
     *     // ... the filter for the PreguntaEvaluacions we want to count
     *   }
     * })
    **/
    count<T extends PreguntaEvaluacionCountArgs>(
      args?: Subset<T, PreguntaEvaluacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreguntaEvaluacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreguntaEvaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreguntaEvaluacionAggregateArgs>(args: Subset<T, PreguntaEvaluacionAggregateArgs>): Prisma.PrismaPromise<GetPreguntaEvaluacionAggregateType<T>>

    /**
     * Group by PreguntaEvaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreguntaEvaluacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreguntaEvaluacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreguntaEvaluacionGroupByArgs['orderBy'] }
        : { orderBy?: PreguntaEvaluacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreguntaEvaluacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreguntaEvaluacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreguntaEvaluacion model
   */
  readonly fields: PreguntaEvaluacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreguntaEvaluacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreguntaEvaluacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreguntaEvaluacion model
   */ 
  interface PreguntaEvaluacionFieldRefs {
    readonly id: FieldRef<"PreguntaEvaluacion", 'Int'>
    readonly textoPregunta: FieldRef<"PreguntaEvaluacion", 'String'>
    readonly categoria: FieldRef<"PreguntaEvaluacion", 'String'>
    readonly peso: FieldRef<"PreguntaEvaluacion", 'Int'>
    readonly orden: FieldRef<"PreguntaEvaluacion", 'Int'>
    readonly activa: FieldRef<"PreguntaEvaluacion", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PreguntaEvaluacion findUnique
   */
  export type PreguntaEvaluacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter, which PreguntaEvaluacion to fetch.
     */
    where: PreguntaEvaluacionWhereUniqueInput
  }

  /**
   * PreguntaEvaluacion findUniqueOrThrow
   */
  export type PreguntaEvaluacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter, which PreguntaEvaluacion to fetch.
     */
    where: PreguntaEvaluacionWhereUniqueInput
  }

  /**
   * PreguntaEvaluacion findFirst
   */
  export type PreguntaEvaluacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter, which PreguntaEvaluacion to fetch.
     */
    where?: PreguntaEvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreguntaEvaluacions to fetch.
     */
    orderBy?: PreguntaEvaluacionOrderByWithRelationInput | PreguntaEvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreguntaEvaluacions.
     */
    cursor?: PreguntaEvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreguntaEvaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreguntaEvaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreguntaEvaluacions.
     */
    distinct?: PreguntaEvaluacionScalarFieldEnum | PreguntaEvaluacionScalarFieldEnum[]
  }

  /**
   * PreguntaEvaluacion findFirstOrThrow
   */
  export type PreguntaEvaluacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter, which PreguntaEvaluacion to fetch.
     */
    where?: PreguntaEvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreguntaEvaluacions to fetch.
     */
    orderBy?: PreguntaEvaluacionOrderByWithRelationInput | PreguntaEvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreguntaEvaluacions.
     */
    cursor?: PreguntaEvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreguntaEvaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreguntaEvaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreguntaEvaluacions.
     */
    distinct?: PreguntaEvaluacionScalarFieldEnum | PreguntaEvaluacionScalarFieldEnum[]
  }

  /**
   * PreguntaEvaluacion findMany
   */
  export type PreguntaEvaluacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter, which PreguntaEvaluacions to fetch.
     */
    where?: PreguntaEvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreguntaEvaluacions to fetch.
     */
    orderBy?: PreguntaEvaluacionOrderByWithRelationInput | PreguntaEvaluacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreguntaEvaluacions.
     */
    cursor?: PreguntaEvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreguntaEvaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreguntaEvaluacions.
     */
    skip?: number
    distinct?: PreguntaEvaluacionScalarFieldEnum | PreguntaEvaluacionScalarFieldEnum[]
  }

  /**
   * PreguntaEvaluacion create
   */
  export type PreguntaEvaluacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * The data needed to create a PreguntaEvaluacion.
     */
    data: XOR<PreguntaEvaluacionCreateInput, PreguntaEvaluacionUncheckedCreateInput>
  }

  /**
   * PreguntaEvaluacion createMany
   */
  export type PreguntaEvaluacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreguntaEvaluacions.
     */
    data: PreguntaEvaluacionCreateManyInput | PreguntaEvaluacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreguntaEvaluacion createManyAndReturn
   */
  export type PreguntaEvaluacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PreguntaEvaluacions.
     */
    data: PreguntaEvaluacionCreateManyInput | PreguntaEvaluacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreguntaEvaluacion update
   */
  export type PreguntaEvaluacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * The data needed to update a PreguntaEvaluacion.
     */
    data: XOR<PreguntaEvaluacionUpdateInput, PreguntaEvaluacionUncheckedUpdateInput>
    /**
     * Choose, which PreguntaEvaluacion to update.
     */
    where: PreguntaEvaluacionWhereUniqueInput
  }

  /**
   * PreguntaEvaluacion updateMany
   */
  export type PreguntaEvaluacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreguntaEvaluacions.
     */
    data: XOR<PreguntaEvaluacionUpdateManyMutationInput, PreguntaEvaluacionUncheckedUpdateManyInput>
    /**
     * Filter which PreguntaEvaluacions to update
     */
    where?: PreguntaEvaluacionWhereInput
  }

  /**
   * PreguntaEvaluacion upsert
   */
  export type PreguntaEvaluacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * The filter to search for the PreguntaEvaluacion to update in case it exists.
     */
    where: PreguntaEvaluacionWhereUniqueInput
    /**
     * In case the PreguntaEvaluacion found by the `where` argument doesn't exist, create a new PreguntaEvaluacion with this data.
     */
    create: XOR<PreguntaEvaluacionCreateInput, PreguntaEvaluacionUncheckedCreateInput>
    /**
     * In case the PreguntaEvaluacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreguntaEvaluacionUpdateInput, PreguntaEvaluacionUncheckedUpdateInput>
  }

  /**
   * PreguntaEvaluacion delete
   */
  export type PreguntaEvaluacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
    /**
     * Filter which PreguntaEvaluacion to delete.
     */
    where: PreguntaEvaluacionWhereUniqueInput
  }

  /**
   * PreguntaEvaluacion deleteMany
   */
  export type PreguntaEvaluacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreguntaEvaluacions to delete
     */
    where?: PreguntaEvaluacionWhereInput
  }

  /**
   * PreguntaEvaluacion without action
   */
  export type PreguntaEvaluacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreguntaEvaluacion
     */
    select?: PreguntaEvaluacionSelect<ExtArgs> | null
  }


  /**
   * Model Recurso
   */

  export type AggregateRecurso = {
    _count: RecursoCountAggregateOutputType | null
    _avg: RecursoAvgAggregateOutputType | null
    _sum: RecursoSumAggregateOutputType | null
    _min: RecursoMinAggregateOutputType | null
    _max: RecursoMaxAggregateOutputType | null
  }

  export type RecursoAvgAggregateOutputType = {
    id: number | null
  }

  export type RecursoSumAggregateOutputType = {
    id: number | null
  }

  export type RecursoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    tipoRecurso: string | null
    urlContenido: string | null
    categoria: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type RecursoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    tipoRecurso: string | null
    urlContenido: string | null
    categoria: string | null
    activo: boolean | null
    fechaCreacion: Date | null
  }

  export type RecursoCountAggregateOutputType = {
    id: number
    titulo: number
    descripcion: number
    tipoRecurso: number
    urlContenido: number
    categoria: number
    activo: number
    fechaCreacion: number
    _all: number
  }


  export type RecursoAvgAggregateInputType = {
    id?: true
  }

  export type RecursoSumAggregateInputType = {
    id?: true
  }

  export type RecursoMinAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    tipoRecurso?: true
    urlContenido?: true
    categoria?: true
    activo?: true
    fechaCreacion?: true
  }

  export type RecursoMaxAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    tipoRecurso?: true
    urlContenido?: true
    categoria?: true
    activo?: true
    fechaCreacion?: true
  }

  export type RecursoCountAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    tipoRecurso?: true
    urlContenido?: true
    categoria?: true
    activo?: true
    fechaCreacion?: true
    _all?: true
  }

  export type RecursoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recurso to aggregate.
     */
    where?: RecursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recursos to fetch.
     */
    orderBy?: RecursoOrderByWithRelationInput | RecursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recursos
    **/
    _count?: true | RecursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecursoMaxAggregateInputType
  }

  export type GetRecursoAggregateType<T extends RecursoAggregateArgs> = {
        [P in keyof T & keyof AggregateRecurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecurso[P]>
      : GetScalarType<T[P], AggregateRecurso[P]>
  }




  export type RecursoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecursoWhereInput
    orderBy?: RecursoOrderByWithAggregationInput | RecursoOrderByWithAggregationInput[]
    by: RecursoScalarFieldEnum[] | RecursoScalarFieldEnum
    having?: RecursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecursoCountAggregateInputType | true
    _avg?: RecursoAvgAggregateInputType
    _sum?: RecursoSumAggregateInputType
    _min?: RecursoMinAggregateInputType
    _max?: RecursoMaxAggregateInputType
  }

  export type RecursoGroupByOutputType = {
    id: number
    titulo: string
    descripcion: string | null
    tipoRecurso: string
    urlContenido: string | null
    categoria: string | null
    activo: boolean | null
    fechaCreacion: Date | null
    _count: RecursoCountAggregateOutputType | null
    _avg: RecursoAvgAggregateOutputType | null
    _sum: RecursoSumAggregateOutputType | null
    _min: RecursoMinAggregateOutputType | null
    _max: RecursoMaxAggregateOutputType | null
  }

  type GetRecursoGroupByPayload<T extends RecursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecursoGroupByOutputType[P]>
            : GetScalarType<T[P], RecursoGroupByOutputType[P]>
        }
      >
    >


  export type RecursoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    tipoRecurso?: boolean
    urlContenido?: boolean
    categoria?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }, ExtArgs["result"]["recurso"]>

  export type RecursoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    tipoRecurso?: boolean
    urlContenido?: boolean
    categoria?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }, ExtArgs["result"]["recurso"]>

  export type RecursoSelectScalar = {
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    tipoRecurso?: boolean
    urlContenido?: boolean
    categoria?: boolean
    activo?: boolean
    fechaCreacion?: boolean
  }


  export type $RecursoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recurso"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descripcion: string | null
      tipoRecurso: string
      urlContenido: string | null
      categoria: string | null
      activo: boolean | null
      fechaCreacion: Date | null
    }, ExtArgs["result"]["recurso"]>
    composites: {}
  }

  type RecursoGetPayload<S extends boolean | null | undefined | RecursoDefaultArgs> = $Result.GetResult<Prisma.$RecursoPayload, S>

  type RecursoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecursoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecursoCountAggregateInputType | true
    }

  export interface RecursoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recurso'], meta: { name: 'Recurso' } }
    /**
     * Find zero or one Recurso that matches the filter.
     * @param {RecursoFindUniqueArgs} args - Arguments to find a Recurso
     * @example
     * // Get one Recurso
     * const recurso = await prisma.recurso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecursoFindUniqueArgs>(args: SelectSubset<T, RecursoFindUniqueArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recurso that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecursoFindUniqueOrThrowArgs} args - Arguments to find a Recurso
     * @example
     * // Get one Recurso
     * const recurso = await prisma.recurso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecursoFindUniqueOrThrowArgs>(args: SelectSubset<T, RecursoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recurso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoFindFirstArgs} args - Arguments to find a Recurso
     * @example
     * // Get one Recurso
     * const recurso = await prisma.recurso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecursoFindFirstArgs>(args?: SelectSubset<T, RecursoFindFirstArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recurso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoFindFirstOrThrowArgs} args - Arguments to find a Recurso
     * @example
     * // Get one Recurso
     * const recurso = await prisma.recurso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecursoFindFirstOrThrowArgs>(args?: SelectSubset<T, RecursoFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recursos
     * const recursos = await prisma.recurso.findMany()
     * 
     * // Get first 10 Recursos
     * const recursos = await prisma.recurso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recursoWithIdOnly = await prisma.recurso.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecursoFindManyArgs>(args?: SelectSubset<T, RecursoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recurso.
     * @param {RecursoCreateArgs} args - Arguments to create a Recurso.
     * @example
     * // Create one Recurso
     * const Recurso = await prisma.recurso.create({
     *   data: {
     *     // ... data to create a Recurso
     *   }
     * })
     * 
     */
    create<T extends RecursoCreateArgs>(args: SelectSubset<T, RecursoCreateArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recursos.
     * @param {RecursoCreateManyArgs} args - Arguments to create many Recursos.
     * @example
     * // Create many Recursos
     * const recurso = await prisma.recurso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecursoCreateManyArgs>(args?: SelectSubset<T, RecursoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recursos and returns the data saved in the database.
     * @param {RecursoCreateManyAndReturnArgs} args - Arguments to create many Recursos.
     * @example
     * // Create many Recursos
     * const recurso = await prisma.recurso.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recursos and only return the `id`
     * const recursoWithIdOnly = await prisma.recurso.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecursoCreateManyAndReturnArgs>(args?: SelectSubset<T, RecursoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recurso.
     * @param {RecursoDeleteArgs} args - Arguments to delete one Recurso.
     * @example
     * // Delete one Recurso
     * const Recurso = await prisma.recurso.delete({
     *   where: {
     *     // ... filter to delete one Recurso
     *   }
     * })
     * 
     */
    delete<T extends RecursoDeleteArgs>(args: SelectSubset<T, RecursoDeleteArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recurso.
     * @param {RecursoUpdateArgs} args - Arguments to update one Recurso.
     * @example
     * // Update one Recurso
     * const recurso = await prisma.recurso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecursoUpdateArgs>(args: SelectSubset<T, RecursoUpdateArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recursos.
     * @param {RecursoDeleteManyArgs} args - Arguments to filter Recursos to delete.
     * @example
     * // Delete a few Recursos
     * const { count } = await prisma.recurso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecursoDeleteManyArgs>(args?: SelectSubset<T, RecursoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recursos
     * const recurso = await prisma.recurso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecursoUpdateManyArgs>(args: SelectSubset<T, RecursoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recurso.
     * @param {RecursoUpsertArgs} args - Arguments to update or create a Recurso.
     * @example
     * // Update or create a Recurso
     * const recurso = await prisma.recurso.upsert({
     *   create: {
     *     // ... data to create a Recurso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recurso we want to update
     *   }
     * })
     */
    upsert<T extends RecursoUpsertArgs>(args: SelectSubset<T, RecursoUpsertArgs<ExtArgs>>): Prisma__RecursoClient<$Result.GetResult<Prisma.$RecursoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoCountArgs} args - Arguments to filter Recursos to count.
     * @example
     * // Count the number of Recursos
     * const count = await prisma.recurso.count({
     *   where: {
     *     // ... the filter for the Recursos we want to count
     *   }
     * })
    **/
    count<T extends RecursoCountArgs>(
      args?: Subset<T, RecursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recurso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecursoAggregateArgs>(args: Subset<T, RecursoAggregateArgs>): Prisma.PrismaPromise<GetRecursoAggregateType<T>>

    /**
     * Group by Recurso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecursoGroupByArgs['orderBy'] }
        : { orderBy?: RecursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recurso model
   */
  readonly fields: RecursoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recurso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecursoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recurso model
   */ 
  interface RecursoFieldRefs {
    readonly id: FieldRef<"Recurso", 'Int'>
    readonly titulo: FieldRef<"Recurso", 'String'>
    readonly descripcion: FieldRef<"Recurso", 'String'>
    readonly tipoRecurso: FieldRef<"Recurso", 'String'>
    readonly urlContenido: FieldRef<"Recurso", 'String'>
    readonly categoria: FieldRef<"Recurso", 'String'>
    readonly activo: FieldRef<"Recurso", 'Boolean'>
    readonly fechaCreacion: FieldRef<"Recurso", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recurso findUnique
   */
  export type RecursoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter, which Recurso to fetch.
     */
    where: RecursoWhereUniqueInput
  }

  /**
   * Recurso findUniqueOrThrow
   */
  export type RecursoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter, which Recurso to fetch.
     */
    where: RecursoWhereUniqueInput
  }

  /**
   * Recurso findFirst
   */
  export type RecursoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter, which Recurso to fetch.
     */
    where?: RecursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recursos to fetch.
     */
    orderBy?: RecursoOrderByWithRelationInput | RecursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recursos.
     */
    cursor?: RecursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recursos.
     */
    distinct?: RecursoScalarFieldEnum | RecursoScalarFieldEnum[]
  }

  /**
   * Recurso findFirstOrThrow
   */
  export type RecursoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter, which Recurso to fetch.
     */
    where?: RecursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recursos to fetch.
     */
    orderBy?: RecursoOrderByWithRelationInput | RecursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recursos.
     */
    cursor?: RecursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recursos.
     */
    distinct?: RecursoScalarFieldEnum | RecursoScalarFieldEnum[]
  }

  /**
   * Recurso findMany
   */
  export type RecursoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter, which Recursos to fetch.
     */
    where?: RecursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recursos to fetch.
     */
    orderBy?: RecursoOrderByWithRelationInput | RecursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recursos.
     */
    cursor?: RecursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recursos.
     */
    skip?: number
    distinct?: RecursoScalarFieldEnum | RecursoScalarFieldEnum[]
  }

  /**
   * Recurso create
   */
  export type RecursoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * The data needed to create a Recurso.
     */
    data: XOR<RecursoCreateInput, RecursoUncheckedCreateInput>
  }

  /**
   * Recurso createMany
   */
  export type RecursoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recursos.
     */
    data: RecursoCreateManyInput | RecursoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recurso createManyAndReturn
   */
  export type RecursoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recursos.
     */
    data: RecursoCreateManyInput | RecursoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recurso update
   */
  export type RecursoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * The data needed to update a Recurso.
     */
    data: XOR<RecursoUpdateInput, RecursoUncheckedUpdateInput>
    /**
     * Choose, which Recurso to update.
     */
    where: RecursoWhereUniqueInput
  }

  /**
   * Recurso updateMany
   */
  export type RecursoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recursos.
     */
    data: XOR<RecursoUpdateManyMutationInput, RecursoUncheckedUpdateManyInput>
    /**
     * Filter which Recursos to update
     */
    where?: RecursoWhereInput
  }

  /**
   * Recurso upsert
   */
  export type RecursoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * The filter to search for the Recurso to update in case it exists.
     */
    where: RecursoWhereUniqueInput
    /**
     * In case the Recurso found by the `where` argument doesn't exist, create a new Recurso with this data.
     */
    create: XOR<RecursoCreateInput, RecursoUncheckedCreateInput>
    /**
     * In case the Recurso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecursoUpdateInput, RecursoUncheckedUpdateInput>
  }

  /**
   * Recurso delete
   */
  export type RecursoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
    /**
     * Filter which Recurso to delete.
     */
    where: RecursoWhereUniqueInput
  }

  /**
   * Recurso deleteMany
   */
  export type RecursoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recursos to delete
     */
    where?: RecursoWhereInput
  }

  /**
   * Recurso without action
   */
  export type RecursoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recurso
     */
    select?: RecursoSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombreCompleto: 'nombreCompleto',
    correo: 'correo',
    contrasenaHash: 'contrasenaHash',
    tipoUsuario: 'tipoUsuario',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const EstudianteScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    carrera: 'carrera',
    semestre: 'semestre',
    nivelEstresActual: 'nivelEstresActual',
    nivelBurnoutActual: 'nivelBurnoutActual',
    estadoRiesgo: 'estadoRiesgo',
    fechaUltimaEvaluacion: 'fechaUltimaEvaluacion'
  };

  export type EstudianteScalarFieldEnum = (typeof EstudianteScalarFieldEnum)[keyof typeof EstudianteScalarFieldEnum]


  export const CoordinadorScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    departamento: 'departamento'
  };

  export type CoordinadorScalarFieldEnum = (typeof CoordinadorScalarFieldEnum)[keyof typeof CoordinadorScalarFieldEnum]


  export const EvaluacionScalarFieldEnum: {
    id: 'id',
    estudianteId: 'estudianteId',
    puntajeEstres: 'puntajeEstres',
    puntajeBurnout: 'puntajeBurnout',
    puntajeTotal: 'puntajeTotal',
    nivelRiesgo: 'nivelRiesgo',
    respuestas: 'respuestas',
    fechaEvaluacion: 'fechaEvaluacion'
  };

  export type EvaluacionScalarFieldEnum = (typeof EvaluacionScalarFieldEnum)[keyof typeof EvaluacionScalarFieldEnum]


  export const AlertaScalarFieldEnum: {
    id: 'id',
    estudianteId: 'estudianteId',
    tipoAlerta: 'tipoAlerta',
    severidad: 'severidad',
    mensaje: 'mensaje',
    estaLeida: 'estaLeida',
    fechaCreacion: 'fechaCreacion'
  };

  export type AlertaScalarFieldEnum = (typeof AlertaScalarFieldEnum)[keyof typeof AlertaScalarFieldEnum]


  export const PreguntaEvaluacionScalarFieldEnum: {
    id: 'id',
    textoPregunta: 'textoPregunta',
    categoria: 'categoria',
    peso: 'peso',
    orden: 'orden',
    activa: 'activa'
  };

  export type PreguntaEvaluacionScalarFieldEnum = (typeof PreguntaEvaluacionScalarFieldEnum)[keyof typeof PreguntaEvaluacionScalarFieldEnum]


  export const RecursoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descripcion: 'descripcion',
    tipoRecurso: 'tipoRecurso',
    urlContenido: 'urlContenido',
    categoria: 'categoria',
    activo: 'activo',
    fechaCreacion: 'fechaCreacion'
  };

  export type RecursoScalarFieldEnum = (typeof RecursoScalarFieldEnum)[keyof typeof RecursoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nombreCompleto?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    contrasenaHash?: StringFilter<"Usuario"> | string
    tipoUsuario?: StringFilter<"Usuario"> | string
    fechaCreacion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    fechaActualizacion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    coordinador?: CoordinadorListRelationFilter
    estudiante?: EstudianteListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombreCompleto?: SortOrder
    correo?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
    fechaActualizacion?: SortOrderInput | SortOrder
    coordinador?: CoordinadorOrderByRelationAggregateInput
    estudiante?: EstudianteOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombreCompleto?: StringFilter<"Usuario"> | string
    contrasenaHash?: StringFilter<"Usuario"> | string
    tipoUsuario?: StringFilter<"Usuario"> | string
    fechaCreacion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    fechaActualizacion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    coordinador?: CoordinadorListRelationFilter
    estudiante?: EstudianteListRelationFilter
  }, "id" | "correo">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombreCompleto?: SortOrder
    correo?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
    fechaActualizacion?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nombreCompleto?: StringWithAggregatesFilter<"Usuario"> | string
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    contrasenaHash?: StringWithAggregatesFilter<"Usuario"> | string
    tipoUsuario?: StringWithAggregatesFilter<"Usuario"> | string
    fechaCreacion?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
    fechaActualizacion?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
  }

  export type EstudianteWhereInput = {
    AND?: EstudianteWhereInput | EstudianteWhereInput[]
    OR?: EstudianteWhereInput[]
    NOT?: EstudianteWhereInput | EstudianteWhereInput[]
    id?: IntFilter<"Estudiante"> | number
    usuarioId?: IntNullableFilter<"Estudiante"> | number | null
    carrera?: StringFilter<"Estudiante"> | string
    semestre?: IntFilter<"Estudiante"> | number
    nivelEstresActual?: IntNullableFilter<"Estudiante"> | number | null
    nivelBurnoutActual?: IntNullableFilter<"Estudiante"> | number | null
    estadoRiesgo?: StringNullableFilter<"Estudiante"> | string | null
    fechaUltimaEvaluacion?: DateTimeNullableFilter<"Estudiante"> | Date | string | null
    alertas?: AlertaListRelationFilter
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    evaluaciones?: EvaluacionListRelationFilter
  }

  export type EstudianteOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    carrera?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrderInput | SortOrder
    nivelBurnoutActual?: SortOrderInput | SortOrder
    estadoRiesgo?: SortOrderInput | SortOrder
    fechaUltimaEvaluacion?: SortOrderInput | SortOrder
    alertas?: AlertaOrderByRelationAggregateInput
    usuario?: UsuarioOrderByWithRelationInput
    evaluaciones?: EvaluacionOrderByRelationAggregateInput
  }

  export type EstudianteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EstudianteWhereInput | EstudianteWhereInput[]
    OR?: EstudianteWhereInput[]
    NOT?: EstudianteWhereInput | EstudianteWhereInput[]
    usuarioId?: IntNullableFilter<"Estudiante"> | number | null
    carrera?: StringFilter<"Estudiante"> | string
    semestre?: IntFilter<"Estudiante"> | number
    nivelEstresActual?: IntNullableFilter<"Estudiante"> | number | null
    nivelBurnoutActual?: IntNullableFilter<"Estudiante"> | number | null
    estadoRiesgo?: StringNullableFilter<"Estudiante"> | string | null
    fechaUltimaEvaluacion?: DateTimeNullableFilter<"Estudiante"> | Date | string | null
    alertas?: AlertaListRelationFilter
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    evaluaciones?: EvaluacionListRelationFilter
  }, "id">

  export type EstudianteOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    carrera?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrderInput | SortOrder
    nivelBurnoutActual?: SortOrderInput | SortOrder
    estadoRiesgo?: SortOrderInput | SortOrder
    fechaUltimaEvaluacion?: SortOrderInput | SortOrder
    _count?: EstudianteCountOrderByAggregateInput
    _avg?: EstudianteAvgOrderByAggregateInput
    _max?: EstudianteMaxOrderByAggregateInput
    _min?: EstudianteMinOrderByAggregateInput
    _sum?: EstudianteSumOrderByAggregateInput
  }

  export type EstudianteScalarWhereWithAggregatesInput = {
    AND?: EstudianteScalarWhereWithAggregatesInput | EstudianteScalarWhereWithAggregatesInput[]
    OR?: EstudianteScalarWhereWithAggregatesInput[]
    NOT?: EstudianteScalarWhereWithAggregatesInput | EstudianteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Estudiante"> | number
    usuarioId?: IntNullableWithAggregatesFilter<"Estudiante"> | number | null
    carrera?: StringWithAggregatesFilter<"Estudiante"> | string
    semestre?: IntWithAggregatesFilter<"Estudiante"> | number
    nivelEstresActual?: IntNullableWithAggregatesFilter<"Estudiante"> | number | null
    nivelBurnoutActual?: IntNullableWithAggregatesFilter<"Estudiante"> | number | null
    estadoRiesgo?: StringNullableWithAggregatesFilter<"Estudiante"> | string | null
    fechaUltimaEvaluacion?: DateTimeNullableWithAggregatesFilter<"Estudiante"> | Date | string | null
  }

  export type CoordinadorWhereInput = {
    AND?: CoordinadorWhereInput | CoordinadorWhereInput[]
    OR?: CoordinadorWhereInput[]
    NOT?: CoordinadorWhereInput | CoordinadorWhereInput[]
    id?: IntFilter<"Coordinador"> | number
    usuarioId?: IntNullableFilter<"Coordinador"> | number | null
    departamento?: StringFilter<"Coordinador"> | string
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
  }

  export type CoordinadorOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    departamento?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type CoordinadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoordinadorWhereInput | CoordinadorWhereInput[]
    OR?: CoordinadorWhereInput[]
    NOT?: CoordinadorWhereInput | CoordinadorWhereInput[]
    usuarioId?: IntNullableFilter<"Coordinador"> | number | null
    departamento?: StringFilter<"Coordinador"> | string
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
  }, "id">

  export type CoordinadorOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    departamento?: SortOrder
    _count?: CoordinadorCountOrderByAggregateInput
    _avg?: CoordinadorAvgOrderByAggregateInput
    _max?: CoordinadorMaxOrderByAggregateInput
    _min?: CoordinadorMinOrderByAggregateInput
    _sum?: CoordinadorSumOrderByAggregateInput
  }

  export type CoordinadorScalarWhereWithAggregatesInput = {
    AND?: CoordinadorScalarWhereWithAggregatesInput | CoordinadorScalarWhereWithAggregatesInput[]
    OR?: CoordinadorScalarWhereWithAggregatesInput[]
    NOT?: CoordinadorScalarWhereWithAggregatesInput | CoordinadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coordinador"> | number
    usuarioId?: IntNullableWithAggregatesFilter<"Coordinador"> | number | null
    departamento?: StringWithAggregatesFilter<"Coordinador"> | string
  }

  export type EvaluacionWhereInput = {
    AND?: EvaluacionWhereInput | EvaluacionWhereInput[]
    OR?: EvaluacionWhereInput[]
    NOT?: EvaluacionWhereInput | EvaluacionWhereInput[]
    id?: IntFilter<"Evaluacion"> | number
    estudianteId?: IntNullableFilter<"Evaluacion"> | number | null
    puntajeEstres?: IntFilter<"Evaluacion"> | number
    puntajeBurnout?: IntFilter<"Evaluacion"> | number
    puntajeTotal?: IntFilter<"Evaluacion"> | number
    nivelRiesgo?: StringFilter<"Evaluacion"> | string
    respuestas?: JsonFilter<"Evaluacion">
    fechaEvaluacion?: DateTimeNullableFilter<"Evaluacion"> | Date | string | null
    estudiante?: XOR<EstudianteNullableRelationFilter, EstudianteWhereInput> | null
  }

  export type EvaluacionOrderByWithRelationInput = {
    id?: SortOrder
    estudianteId?: SortOrderInput | SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
    nivelRiesgo?: SortOrder
    respuestas?: SortOrder
    fechaEvaluacion?: SortOrderInput | SortOrder
    estudiante?: EstudianteOrderByWithRelationInput
  }

  export type EvaluacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EvaluacionWhereInput | EvaluacionWhereInput[]
    OR?: EvaluacionWhereInput[]
    NOT?: EvaluacionWhereInput | EvaluacionWhereInput[]
    estudianteId?: IntNullableFilter<"Evaluacion"> | number | null
    puntajeEstres?: IntFilter<"Evaluacion"> | number
    puntajeBurnout?: IntFilter<"Evaluacion"> | number
    puntajeTotal?: IntFilter<"Evaluacion"> | number
    nivelRiesgo?: StringFilter<"Evaluacion"> | string
    respuestas?: JsonFilter<"Evaluacion">
    fechaEvaluacion?: DateTimeNullableFilter<"Evaluacion"> | Date | string | null
    estudiante?: XOR<EstudianteNullableRelationFilter, EstudianteWhereInput> | null
  }, "id">

  export type EvaluacionOrderByWithAggregationInput = {
    id?: SortOrder
    estudianteId?: SortOrderInput | SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
    nivelRiesgo?: SortOrder
    respuestas?: SortOrder
    fechaEvaluacion?: SortOrderInput | SortOrder
    _count?: EvaluacionCountOrderByAggregateInput
    _avg?: EvaluacionAvgOrderByAggregateInput
    _max?: EvaluacionMaxOrderByAggregateInput
    _min?: EvaluacionMinOrderByAggregateInput
    _sum?: EvaluacionSumOrderByAggregateInput
  }

  export type EvaluacionScalarWhereWithAggregatesInput = {
    AND?: EvaluacionScalarWhereWithAggregatesInput | EvaluacionScalarWhereWithAggregatesInput[]
    OR?: EvaluacionScalarWhereWithAggregatesInput[]
    NOT?: EvaluacionScalarWhereWithAggregatesInput | EvaluacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Evaluacion"> | number
    estudianteId?: IntNullableWithAggregatesFilter<"Evaluacion"> | number | null
    puntajeEstres?: IntWithAggregatesFilter<"Evaluacion"> | number
    puntajeBurnout?: IntWithAggregatesFilter<"Evaluacion"> | number
    puntajeTotal?: IntWithAggregatesFilter<"Evaluacion"> | number
    nivelRiesgo?: StringWithAggregatesFilter<"Evaluacion"> | string
    respuestas?: JsonWithAggregatesFilter<"Evaluacion">
    fechaEvaluacion?: DateTimeNullableWithAggregatesFilter<"Evaluacion"> | Date | string | null
  }

  export type AlertaWhereInput = {
    AND?: AlertaWhereInput | AlertaWhereInput[]
    OR?: AlertaWhereInput[]
    NOT?: AlertaWhereInput | AlertaWhereInput[]
    id?: IntFilter<"Alerta"> | number
    estudianteId?: IntNullableFilter<"Alerta"> | number | null
    tipoAlerta?: StringFilter<"Alerta"> | string
    severidad?: StringFilter<"Alerta"> | string
    mensaje?: StringFilter<"Alerta"> | string
    estaLeida?: BoolNullableFilter<"Alerta"> | boolean | null
    fechaCreacion?: DateTimeNullableFilter<"Alerta"> | Date | string | null
    estudiante?: XOR<EstudianteNullableRelationFilter, EstudianteWhereInput> | null
  }

  export type AlertaOrderByWithRelationInput = {
    id?: SortOrder
    estudianteId?: SortOrderInput | SortOrder
    tipoAlerta?: SortOrder
    severidad?: SortOrder
    mensaje?: SortOrder
    estaLeida?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
    estudiante?: EstudianteOrderByWithRelationInput
  }

  export type AlertaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlertaWhereInput | AlertaWhereInput[]
    OR?: AlertaWhereInput[]
    NOT?: AlertaWhereInput | AlertaWhereInput[]
    estudianteId?: IntNullableFilter<"Alerta"> | number | null
    tipoAlerta?: StringFilter<"Alerta"> | string
    severidad?: StringFilter<"Alerta"> | string
    mensaje?: StringFilter<"Alerta"> | string
    estaLeida?: BoolNullableFilter<"Alerta"> | boolean | null
    fechaCreacion?: DateTimeNullableFilter<"Alerta"> | Date | string | null
    estudiante?: XOR<EstudianteNullableRelationFilter, EstudianteWhereInput> | null
  }, "id">

  export type AlertaOrderByWithAggregationInput = {
    id?: SortOrder
    estudianteId?: SortOrderInput | SortOrder
    tipoAlerta?: SortOrder
    severidad?: SortOrder
    mensaje?: SortOrder
    estaLeida?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
    _count?: AlertaCountOrderByAggregateInput
    _avg?: AlertaAvgOrderByAggregateInput
    _max?: AlertaMaxOrderByAggregateInput
    _min?: AlertaMinOrderByAggregateInput
    _sum?: AlertaSumOrderByAggregateInput
  }

  export type AlertaScalarWhereWithAggregatesInput = {
    AND?: AlertaScalarWhereWithAggregatesInput | AlertaScalarWhereWithAggregatesInput[]
    OR?: AlertaScalarWhereWithAggregatesInput[]
    NOT?: AlertaScalarWhereWithAggregatesInput | AlertaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alerta"> | number
    estudianteId?: IntNullableWithAggregatesFilter<"Alerta"> | number | null
    tipoAlerta?: StringWithAggregatesFilter<"Alerta"> | string
    severidad?: StringWithAggregatesFilter<"Alerta"> | string
    mensaje?: StringWithAggregatesFilter<"Alerta"> | string
    estaLeida?: BoolNullableWithAggregatesFilter<"Alerta"> | boolean | null
    fechaCreacion?: DateTimeNullableWithAggregatesFilter<"Alerta"> | Date | string | null
  }

  export type PreguntaEvaluacionWhereInput = {
    AND?: PreguntaEvaluacionWhereInput | PreguntaEvaluacionWhereInput[]
    OR?: PreguntaEvaluacionWhereInput[]
    NOT?: PreguntaEvaluacionWhereInput | PreguntaEvaluacionWhereInput[]
    id?: IntFilter<"PreguntaEvaluacion"> | number
    textoPregunta?: StringFilter<"PreguntaEvaluacion"> | string
    categoria?: StringFilter<"PreguntaEvaluacion"> | string
    peso?: IntNullableFilter<"PreguntaEvaluacion"> | number | null
    orden?: IntNullableFilter<"PreguntaEvaluacion"> | number | null
    activa?: BoolNullableFilter<"PreguntaEvaluacion"> | boolean | null
  }

  export type PreguntaEvaluacionOrderByWithRelationInput = {
    id?: SortOrder
    textoPregunta?: SortOrder
    categoria?: SortOrder
    peso?: SortOrderInput | SortOrder
    orden?: SortOrderInput | SortOrder
    activa?: SortOrderInput | SortOrder
  }

  export type PreguntaEvaluacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PreguntaEvaluacionWhereInput | PreguntaEvaluacionWhereInput[]
    OR?: PreguntaEvaluacionWhereInput[]
    NOT?: PreguntaEvaluacionWhereInput | PreguntaEvaluacionWhereInput[]
    textoPregunta?: StringFilter<"PreguntaEvaluacion"> | string
    categoria?: StringFilter<"PreguntaEvaluacion"> | string
    peso?: IntNullableFilter<"PreguntaEvaluacion"> | number | null
    orden?: IntNullableFilter<"PreguntaEvaluacion"> | number | null
    activa?: BoolNullableFilter<"PreguntaEvaluacion"> | boolean | null
  }, "id">

  export type PreguntaEvaluacionOrderByWithAggregationInput = {
    id?: SortOrder
    textoPregunta?: SortOrder
    categoria?: SortOrder
    peso?: SortOrderInput | SortOrder
    orden?: SortOrderInput | SortOrder
    activa?: SortOrderInput | SortOrder
    _count?: PreguntaEvaluacionCountOrderByAggregateInput
    _avg?: PreguntaEvaluacionAvgOrderByAggregateInput
    _max?: PreguntaEvaluacionMaxOrderByAggregateInput
    _min?: PreguntaEvaluacionMinOrderByAggregateInput
    _sum?: PreguntaEvaluacionSumOrderByAggregateInput
  }

  export type PreguntaEvaluacionScalarWhereWithAggregatesInput = {
    AND?: PreguntaEvaluacionScalarWhereWithAggregatesInput | PreguntaEvaluacionScalarWhereWithAggregatesInput[]
    OR?: PreguntaEvaluacionScalarWhereWithAggregatesInput[]
    NOT?: PreguntaEvaluacionScalarWhereWithAggregatesInput | PreguntaEvaluacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreguntaEvaluacion"> | number
    textoPregunta?: StringWithAggregatesFilter<"PreguntaEvaluacion"> | string
    categoria?: StringWithAggregatesFilter<"PreguntaEvaluacion"> | string
    peso?: IntNullableWithAggregatesFilter<"PreguntaEvaluacion"> | number | null
    orden?: IntNullableWithAggregatesFilter<"PreguntaEvaluacion"> | number | null
    activa?: BoolNullableWithAggregatesFilter<"PreguntaEvaluacion"> | boolean | null
  }

  export type RecursoWhereInput = {
    AND?: RecursoWhereInput | RecursoWhereInput[]
    OR?: RecursoWhereInput[]
    NOT?: RecursoWhereInput | RecursoWhereInput[]
    id?: IntFilter<"Recurso"> | number
    titulo?: StringFilter<"Recurso"> | string
    descripcion?: StringNullableFilter<"Recurso"> | string | null
    tipoRecurso?: StringFilter<"Recurso"> | string
    urlContenido?: StringNullableFilter<"Recurso"> | string | null
    categoria?: StringNullableFilter<"Recurso"> | string | null
    activo?: BoolNullableFilter<"Recurso"> | boolean | null
    fechaCreacion?: DateTimeNullableFilter<"Recurso"> | Date | string | null
  }

  export type RecursoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tipoRecurso?: SortOrder
    urlContenido?: SortOrderInput | SortOrder
    categoria?: SortOrderInput | SortOrder
    activo?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
  }

  export type RecursoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RecursoWhereInput | RecursoWhereInput[]
    OR?: RecursoWhereInput[]
    NOT?: RecursoWhereInput | RecursoWhereInput[]
    titulo?: StringFilter<"Recurso"> | string
    descripcion?: StringNullableFilter<"Recurso"> | string | null
    tipoRecurso?: StringFilter<"Recurso"> | string
    urlContenido?: StringNullableFilter<"Recurso"> | string | null
    categoria?: StringNullableFilter<"Recurso"> | string | null
    activo?: BoolNullableFilter<"Recurso"> | boolean | null
    fechaCreacion?: DateTimeNullableFilter<"Recurso"> | Date | string | null
  }, "id">

  export type RecursoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    tipoRecurso?: SortOrder
    urlContenido?: SortOrderInput | SortOrder
    categoria?: SortOrderInput | SortOrder
    activo?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrderInput | SortOrder
    _count?: RecursoCountOrderByAggregateInput
    _avg?: RecursoAvgOrderByAggregateInput
    _max?: RecursoMaxOrderByAggregateInput
    _min?: RecursoMinOrderByAggregateInput
    _sum?: RecursoSumOrderByAggregateInput
  }

  export type RecursoScalarWhereWithAggregatesInput = {
    AND?: RecursoScalarWhereWithAggregatesInput | RecursoScalarWhereWithAggregatesInput[]
    OR?: RecursoScalarWhereWithAggregatesInput[]
    NOT?: RecursoScalarWhereWithAggregatesInput | RecursoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recurso"> | number
    titulo?: StringWithAggregatesFilter<"Recurso"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Recurso"> | string | null
    tipoRecurso?: StringWithAggregatesFilter<"Recurso"> | string
    urlContenido?: StringNullableWithAggregatesFilter<"Recurso"> | string | null
    categoria?: StringNullableWithAggregatesFilter<"Recurso"> | string | null
    activo?: BoolNullableWithAggregatesFilter<"Recurso"> | boolean | null
    fechaCreacion?: DateTimeNullableWithAggregatesFilter<"Recurso"> | Date | string | null
  }

  export type UsuarioCreateInput = {
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    coordinador?: CoordinadorCreateNestedManyWithoutUsuarioInput
    estudiante?: EstudianteCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    coordinador?: CoordinadorUncheckedCreateNestedManyWithoutUsuarioInput
    estudiante?: EstudianteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coordinador?: CoordinadorUpdateManyWithoutUsuarioNestedInput
    estudiante?: EstudianteUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coordinador?: CoordinadorUncheckedUpdateManyWithoutUsuarioNestedInput
    estudiante?: EstudianteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EstudianteCreateInput = {
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaCreateNestedManyWithoutEstudianteInput
    usuario?: UsuarioCreateNestedOneWithoutEstudianteInput
    evaluaciones?: EvaluacionCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteUncheckedCreateInput = {
    id?: number
    usuarioId?: number | null
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutEstudianteInput
    evaluaciones?: EvaluacionUncheckedCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteUpdateInput = {
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUpdateManyWithoutEstudianteNestedInput
    usuario?: UsuarioUpdateOneWithoutEstudianteNestedInput
    evaluaciones?: EvaluacionUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUncheckedUpdateManyWithoutEstudianteNestedInput
    evaluaciones?: EvaluacionUncheckedUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteCreateManyInput = {
    id?: number
    usuarioId?: number | null
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
  }

  export type EstudianteUpdateManyMutationInput = {
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EstudianteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CoordinadorCreateInput = {
    departamento: string
    usuario?: UsuarioCreateNestedOneWithoutCoordinadorInput
  }

  export type CoordinadorUncheckedCreateInput = {
    id?: number
    usuarioId?: number | null
    departamento: string
  }

  export type CoordinadorUpdateInput = {
    departamento?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutCoordinadorNestedInput
  }

  export type CoordinadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type CoordinadorCreateManyInput = {
    id?: number
    usuarioId?: number | null
    departamento: string
  }

  export type CoordinadorUpdateManyMutationInput = {
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type CoordinadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type EvaluacionCreateInput = {
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
    estudiante?: EstudianteCreateNestedOneWithoutEvaluacionesInput
  }

  export type EvaluacionUncheckedCreateInput = {
    id?: number
    estudianteId?: number | null
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
  }

  export type EvaluacionUpdateInput = {
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estudiante?: EstudianteUpdateOneWithoutEvaluacionesNestedInput
  }

  export type EvaluacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estudianteId?: NullableIntFieldUpdateOperationsInput | number | null
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvaluacionCreateManyInput = {
    id?: number
    estudianteId?: number | null
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
  }

  export type EvaluacionUpdateManyMutationInput = {
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvaluacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estudianteId?: NullableIntFieldUpdateOperationsInput | number | null
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaCreateInput = {
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
    estudiante?: EstudianteCreateNestedOneWithoutAlertasInput
  }

  export type AlertaUncheckedCreateInput = {
    id?: number
    estudianteId?: number | null
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type AlertaUpdateInput = {
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estudiante?: EstudianteUpdateOneWithoutAlertasNestedInput
  }

  export type AlertaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estudianteId?: NullableIntFieldUpdateOperationsInput | number | null
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaCreateManyInput = {
    id?: number
    estudianteId?: number | null
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type AlertaUpdateManyMutationInput = {
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estudianteId?: NullableIntFieldUpdateOperationsInput | number | null
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PreguntaEvaluacionCreateInput = {
    textoPregunta: string
    categoria: string
    peso?: number | null
    orden?: number | null
    activa?: boolean | null
  }

  export type PreguntaEvaluacionUncheckedCreateInput = {
    id?: number
    textoPregunta: string
    categoria: string
    peso?: number | null
    orden?: number | null
    activa?: boolean | null
  }

  export type PreguntaEvaluacionUpdateInput = {
    textoPregunta?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    peso?: NullableIntFieldUpdateOperationsInput | number | null
    orden?: NullableIntFieldUpdateOperationsInput | number | null
    activa?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreguntaEvaluacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    textoPregunta?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    peso?: NullableIntFieldUpdateOperationsInput | number | null
    orden?: NullableIntFieldUpdateOperationsInput | number | null
    activa?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreguntaEvaluacionCreateManyInput = {
    id?: number
    textoPregunta: string
    categoria: string
    peso?: number | null
    orden?: number | null
    activa?: boolean | null
  }

  export type PreguntaEvaluacionUpdateManyMutationInput = {
    textoPregunta?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    peso?: NullableIntFieldUpdateOperationsInput | number | null
    orden?: NullableIntFieldUpdateOperationsInput | number | null
    activa?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreguntaEvaluacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    textoPregunta?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    peso?: NullableIntFieldUpdateOperationsInput | number | null
    orden?: NullableIntFieldUpdateOperationsInput | number | null
    activa?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RecursoCreateInput = {
    titulo: string
    descripcion?: string | null
    tipoRecurso: string
    urlContenido?: string | null
    categoria?: string | null
    activo?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type RecursoUncheckedCreateInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    tipoRecurso: string
    urlContenido?: string | null
    categoria?: string | null
    activo?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type RecursoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipoRecurso?: StringFieldUpdateOperationsInput | string
    urlContenido?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecursoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipoRecurso?: StringFieldUpdateOperationsInput | string
    urlContenido?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecursoCreateManyInput = {
    id?: number
    titulo: string
    descripcion?: string | null
    tipoRecurso: string
    urlContenido?: string | null
    categoria?: string | null
    activo?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type RecursoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipoRecurso?: StringFieldUpdateOperationsInput | string
    urlContenido?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecursoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    tipoRecurso?: StringFieldUpdateOperationsInput | string
    urlContenido?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    activo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CoordinadorListRelationFilter = {
    every?: CoordinadorWhereInput
    some?: CoordinadorWhereInput
    none?: CoordinadorWhereInput
  }

  export type EstudianteListRelationFilter = {
    every?: EstudianteWhereInput
    some?: EstudianteWhereInput
    none?: EstudianteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CoordinadorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstudianteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombreCompleto?: SortOrder
    correo?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreCompleto?: SortOrder
    correo?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombreCompleto?: SortOrder
    correo?: SortOrder
    contrasenaHash?: SortOrder
    tipoUsuario?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AlertaListRelationFilter = {
    every?: AlertaWhereInput
    some?: AlertaWhereInput
    none?: AlertaWhereInput
  }

  export type UsuarioNullableRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type EvaluacionListRelationFilter = {
    every?: EvaluacionWhereInput
    some?: EvaluacionWhereInput
    none?: EvaluacionWhereInput
  }

  export type AlertaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EvaluacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstudianteCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    carrera?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrder
    nivelBurnoutActual?: SortOrder
    estadoRiesgo?: SortOrder
    fechaUltimaEvaluacion?: SortOrder
  }

  export type EstudianteAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrder
    nivelBurnoutActual?: SortOrder
  }

  export type EstudianteMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    carrera?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrder
    nivelBurnoutActual?: SortOrder
    estadoRiesgo?: SortOrder
    fechaUltimaEvaluacion?: SortOrder
  }

  export type EstudianteMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    carrera?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrder
    nivelBurnoutActual?: SortOrder
    estadoRiesgo?: SortOrder
    fechaUltimaEvaluacion?: SortOrder
  }

  export type EstudianteSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    semestre?: SortOrder
    nivelEstresActual?: SortOrder
    nivelBurnoutActual?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CoordinadorCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    departamento?: SortOrder
  }

  export type CoordinadorAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CoordinadorMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    departamento?: SortOrder
  }

  export type CoordinadorMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    departamento?: SortOrder
  }

  export type CoordinadorSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EstudianteNullableRelationFilter = {
    is?: EstudianteWhereInput | null
    isNot?: EstudianteWhereInput | null
  }

  export type EvaluacionCountOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
    nivelRiesgo?: SortOrder
    respuestas?: SortOrder
    fechaEvaluacion?: SortOrder
  }

  export type EvaluacionAvgOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
  }

  export type EvaluacionMaxOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
    nivelRiesgo?: SortOrder
    fechaEvaluacion?: SortOrder
  }

  export type EvaluacionMinOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
    nivelRiesgo?: SortOrder
    fechaEvaluacion?: SortOrder
  }

  export type EvaluacionSumOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    puntajeEstres?: SortOrder
    puntajeBurnout?: SortOrder
    puntajeTotal?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AlertaCountOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    tipoAlerta?: SortOrder
    severidad?: SortOrder
    mensaje?: SortOrder
    estaLeida?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type AlertaAvgOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
  }

  export type AlertaMaxOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    tipoAlerta?: SortOrder
    severidad?: SortOrder
    mensaje?: SortOrder
    estaLeida?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type AlertaMinOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
    tipoAlerta?: SortOrder
    severidad?: SortOrder
    mensaje?: SortOrder
    estaLeida?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type AlertaSumOrderByAggregateInput = {
    id?: SortOrder
    estudianteId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PreguntaEvaluacionCountOrderByAggregateInput = {
    id?: SortOrder
    textoPregunta?: SortOrder
    categoria?: SortOrder
    peso?: SortOrder
    orden?: SortOrder
    activa?: SortOrder
  }

  export type PreguntaEvaluacionAvgOrderByAggregateInput = {
    id?: SortOrder
    peso?: SortOrder
    orden?: SortOrder
  }

  export type PreguntaEvaluacionMaxOrderByAggregateInput = {
    id?: SortOrder
    textoPregunta?: SortOrder
    categoria?: SortOrder
    peso?: SortOrder
    orden?: SortOrder
    activa?: SortOrder
  }

  export type PreguntaEvaluacionMinOrderByAggregateInput = {
    id?: SortOrder
    textoPregunta?: SortOrder
    categoria?: SortOrder
    peso?: SortOrder
    orden?: SortOrder
    activa?: SortOrder
  }

  export type PreguntaEvaluacionSumOrderByAggregateInput = {
    id?: SortOrder
    peso?: SortOrder
    orden?: SortOrder
  }

  export type RecursoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    tipoRecurso?: SortOrder
    urlContenido?: SortOrder
    categoria?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type RecursoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RecursoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    tipoRecurso?: SortOrder
    urlContenido?: SortOrder
    categoria?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type RecursoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    tipoRecurso?: SortOrder
    urlContenido?: SortOrder
    categoria?: SortOrder
    activo?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type RecursoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoordinadorCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput> | CoordinadorCreateWithoutUsuarioInput[] | CoordinadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CoordinadorCreateOrConnectWithoutUsuarioInput | CoordinadorCreateOrConnectWithoutUsuarioInput[]
    createMany?: CoordinadorCreateManyUsuarioInputEnvelope
    connect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
  }

  export type EstudianteCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput> | EstudianteCreateWithoutUsuarioInput[] | EstudianteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EstudianteCreateOrConnectWithoutUsuarioInput | EstudianteCreateOrConnectWithoutUsuarioInput[]
    createMany?: EstudianteCreateManyUsuarioInputEnvelope
    connect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
  }

  export type CoordinadorUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput> | CoordinadorCreateWithoutUsuarioInput[] | CoordinadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CoordinadorCreateOrConnectWithoutUsuarioInput | CoordinadorCreateOrConnectWithoutUsuarioInput[]
    createMany?: CoordinadorCreateManyUsuarioInputEnvelope
    connect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
  }

  export type EstudianteUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput> | EstudianteCreateWithoutUsuarioInput[] | EstudianteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EstudianteCreateOrConnectWithoutUsuarioInput | EstudianteCreateOrConnectWithoutUsuarioInput[]
    createMany?: EstudianteCreateManyUsuarioInputEnvelope
    connect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CoordinadorUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput> | CoordinadorCreateWithoutUsuarioInput[] | CoordinadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CoordinadorCreateOrConnectWithoutUsuarioInput | CoordinadorCreateOrConnectWithoutUsuarioInput[]
    upsert?: CoordinadorUpsertWithWhereUniqueWithoutUsuarioInput | CoordinadorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CoordinadorCreateManyUsuarioInputEnvelope
    set?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    disconnect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    delete?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    connect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    update?: CoordinadorUpdateWithWhereUniqueWithoutUsuarioInput | CoordinadorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CoordinadorUpdateManyWithWhereWithoutUsuarioInput | CoordinadorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CoordinadorScalarWhereInput | CoordinadorScalarWhereInput[]
  }

  export type EstudianteUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput> | EstudianteCreateWithoutUsuarioInput[] | EstudianteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EstudianteCreateOrConnectWithoutUsuarioInput | EstudianteCreateOrConnectWithoutUsuarioInput[]
    upsert?: EstudianteUpsertWithWhereUniqueWithoutUsuarioInput | EstudianteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: EstudianteCreateManyUsuarioInputEnvelope
    set?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    disconnect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    delete?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    connect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    update?: EstudianteUpdateWithWhereUniqueWithoutUsuarioInput | EstudianteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: EstudianteUpdateManyWithWhereWithoutUsuarioInput | EstudianteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: EstudianteScalarWhereInput | EstudianteScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoordinadorUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput> | CoordinadorCreateWithoutUsuarioInput[] | CoordinadorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CoordinadorCreateOrConnectWithoutUsuarioInput | CoordinadorCreateOrConnectWithoutUsuarioInput[]
    upsert?: CoordinadorUpsertWithWhereUniqueWithoutUsuarioInput | CoordinadorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CoordinadorCreateManyUsuarioInputEnvelope
    set?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    disconnect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    delete?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    connect?: CoordinadorWhereUniqueInput | CoordinadorWhereUniqueInput[]
    update?: CoordinadorUpdateWithWhereUniqueWithoutUsuarioInput | CoordinadorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CoordinadorUpdateManyWithWhereWithoutUsuarioInput | CoordinadorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CoordinadorScalarWhereInput | CoordinadorScalarWhereInput[]
  }

  export type EstudianteUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput> | EstudianteCreateWithoutUsuarioInput[] | EstudianteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EstudianteCreateOrConnectWithoutUsuarioInput | EstudianteCreateOrConnectWithoutUsuarioInput[]
    upsert?: EstudianteUpsertWithWhereUniqueWithoutUsuarioInput | EstudianteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: EstudianteCreateManyUsuarioInputEnvelope
    set?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    disconnect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    delete?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    connect?: EstudianteWhereUniqueInput | EstudianteWhereUniqueInput[]
    update?: EstudianteUpdateWithWhereUniqueWithoutUsuarioInput | EstudianteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: EstudianteUpdateManyWithWhereWithoutUsuarioInput | EstudianteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: EstudianteScalarWhereInput | EstudianteScalarWhereInput[]
  }

  export type AlertaCreateNestedManyWithoutEstudianteInput = {
    create?: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput> | AlertaCreateWithoutEstudianteInput[] | AlertaUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutEstudianteInput | AlertaCreateOrConnectWithoutEstudianteInput[]
    createMany?: AlertaCreateManyEstudianteInputEnvelope
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
  }

  export type UsuarioCreateNestedOneWithoutEstudianteInput = {
    create?: XOR<UsuarioCreateWithoutEstudianteInput, UsuarioUncheckedCreateWithoutEstudianteInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEstudianteInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EvaluacionCreateNestedManyWithoutEstudianteInput = {
    create?: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput> | EvaluacionCreateWithoutEstudianteInput[] | EvaluacionUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: EvaluacionCreateOrConnectWithoutEstudianteInput | EvaluacionCreateOrConnectWithoutEstudianteInput[]
    createMany?: EvaluacionCreateManyEstudianteInputEnvelope
    connect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
  }

  export type AlertaUncheckedCreateNestedManyWithoutEstudianteInput = {
    create?: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput> | AlertaCreateWithoutEstudianteInput[] | AlertaUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutEstudianteInput | AlertaCreateOrConnectWithoutEstudianteInput[]
    createMany?: AlertaCreateManyEstudianteInputEnvelope
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
  }

  export type EvaluacionUncheckedCreateNestedManyWithoutEstudianteInput = {
    create?: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput> | EvaluacionCreateWithoutEstudianteInput[] | EvaluacionUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: EvaluacionCreateOrConnectWithoutEstudianteInput | EvaluacionCreateOrConnectWithoutEstudianteInput[]
    createMany?: EvaluacionCreateManyEstudianteInputEnvelope
    connect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AlertaUpdateManyWithoutEstudianteNestedInput = {
    create?: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput> | AlertaCreateWithoutEstudianteInput[] | AlertaUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutEstudianteInput | AlertaCreateOrConnectWithoutEstudianteInput[]
    upsert?: AlertaUpsertWithWhereUniqueWithoutEstudianteInput | AlertaUpsertWithWhereUniqueWithoutEstudianteInput[]
    createMany?: AlertaCreateManyEstudianteInputEnvelope
    set?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    disconnect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    delete?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    update?: AlertaUpdateWithWhereUniqueWithoutEstudianteInput | AlertaUpdateWithWhereUniqueWithoutEstudianteInput[]
    updateMany?: AlertaUpdateManyWithWhereWithoutEstudianteInput | AlertaUpdateManyWithWhereWithoutEstudianteInput[]
    deleteMany?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
  }

  export type UsuarioUpdateOneWithoutEstudianteNestedInput = {
    create?: XOR<UsuarioCreateWithoutEstudianteInput, UsuarioUncheckedCreateWithoutEstudianteInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEstudianteInput
    upsert?: UsuarioUpsertWithoutEstudianteInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutEstudianteInput, UsuarioUpdateWithoutEstudianteInput>, UsuarioUncheckedUpdateWithoutEstudianteInput>
  }

  export type EvaluacionUpdateManyWithoutEstudianteNestedInput = {
    create?: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput> | EvaluacionCreateWithoutEstudianteInput[] | EvaluacionUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: EvaluacionCreateOrConnectWithoutEstudianteInput | EvaluacionCreateOrConnectWithoutEstudianteInput[]
    upsert?: EvaluacionUpsertWithWhereUniqueWithoutEstudianteInput | EvaluacionUpsertWithWhereUniqueWithoutEstudianteInput[]
    createMany?: EvaluacionCreateManyEstudianteInputEnvelope
    set?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    disconnect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    delete?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    connect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    update?: EvaluacionUpdateWithWhereUniqueWithoutEstudianteInput | EvaluacionUpdateWithWhereUniqueWithoutEstudianteInput[]
    updateMany?: EvaluacionUpdateManyWithWhereWithoutEstudianteInput | EvaluacionUpdateManyWithWhereWithoutEstudianteInput[]
    deleteMany?: EvaluacionScalarWhereInput | EvaluacionScalarWhereInput[]
  }

  export type AlertaUncheckedUpdateManyWithoutEstudianteNestedInput = {
    create?: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput> | AlertaCreateWithoutEstudianteInput[] | AlertaUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: AlertaCreateOrConnectWithoutEstudianteInput | AlertaCreateOrConnectWithoutEstudianteInput[]
    upsert?: AlertaUpsertWithWhereUniqueWithoutEstudianteInput | AlertaUpsertWithWhereUniqueWithoutEstudianteInput[]
    createMany?: AlertaCreateManyEstudianteInputEnvelope
    set?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    disconnect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    delete?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    connect?: AlertaWhereUniqueInput | AlertaWhereUniqueInput[]
    update?: AlertaUpdateWithWhereUniqueWithoutEstudianteInput | AlertaUpdateWithWhereUniqueWithoutEstudianteInput[]
    updateMany?: AlertaUpdateManyWithWhereWithoutEstudianteInput | AlertaUpdateManyWithWhereWithoutEstudianteInput[]
    deleteMany?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
  }

  export type EvaluacionUncheckedUpdateManyWithoutEstudianteNestedInput = {
    create?: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput> | EvaluacionCreateWithoutEstudianteInput[] | EvaluacionUncheckedCreateWithoutEstudianteInput[]
    connectOrCreate?: EvaluacionCreateOrConnectWithoutEstudianteInput | EvaluacionCreateOrConnectWithoutEstudianteInput[]
    upsert?: EvaluacionUpsertWithWhereUniqueWithoutEstudianteInput | EvaluacionUpsertWithWhereUniqueWithoutEstudianteInput[]
    createMany?: EvaluacionCreateManyEstudianteInputEnvelope
    set?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    disconnect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    delete?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    connect?: EvaluacionWhereUniqueInput | EvaluacionWhereUniqueInput[]
    update?: EvaluacionUpdateWithWhereUniqueWithoutEstudianteInput | EvaluacionUpdateWithWhereUniqueWithoutEstudianteInput[]
    updateMany?: EvaluacionUpdateManyWithWhereWithoutEstudianteInput | EvaluacionUpdateManyWithWhereWithoutEstudianteInput[]
    deleteMany?: EvaluacionScalarWhereInput | EvaluacionScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutCoordinadorInput = {
    create?: XOR<UsuarioCreateWithoutCoordinadorInput, UsuarioUncheckedCreateWithoutCoordinadorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCoordinadorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneWithoutCoordinadorNestedInput = {
    create?: XOR<UsuarioCreateWithoutCoordinadorInput, UsuarioUncheckedCreateWithoutCoordinadorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCoordinadorInput
    upsert?: UsuarioUpsertWithoutCoordinadorInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCoordinadorInput, UsuarioUpdateWithoutCoordinadorInput>, UsuarioUncheckedUpdateWithoutCoordinadorInput>
  }

  export type EstudianteCreateNestedOneWithoutEvaluacionesInput = {
    create?: XOR<EstudianteCreateWithoutEvaluacionesInput, EstudianteUncheckedCreateWithoutEvaluacionesInput>
    connectOrCreate?: EstudianteCreateOrConnectWithoutEvaluacionesInput
    connect?: EstudianteWhereUniqueInput
  }

  export type EstudianteUpdateOneWithoutEvaluacionesNestedInput = {
    create?: XOR<EstudianteCreateWithoutEvaluacionesInput, EstudianteUncheckedCreateWithoutEvaluacionesInput>
    connectOrCreate?: EstudianteCreateOrConnectWithoutEvaluacionesInput
    upsert?: EstudianteUpsertWithoutEvaluacionesInput
    disconnect?: EstudianteWhereInput | boolean
    delete?: EstudianteWhereInput | boolean
    connect?: EstudianteWhereUniqueInput
    update?: XOR<XOR<EstudianteUpdateToOneWithWhereWithoutEvaluacionesInput, EstudianteUpdateWithoutEvaluacionesInput>, EstudianteUncheckedUpdateWithoutEvaluacionesInput>
  }

  export type EstudianteCreateNestedOneWithoutAlertasInput = {
    create?: XOR<EstudianteCreateWithoutAlertasInput, EstudianteUncheckedCreateWithoutAlertasInput>
    connectOrCreate?: EstudianteCreateOrConnectWithoutAlertasInput
    connect?: EstudianteWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EstudianteUpdateOneWithoutAlertasNestedInput = {
    create?: XOR<EstudianteCreateWithoutAlertasInput, EstudianteUncheckedCreateWithoutAlertasInput>
    connectOrCreate?: EstudianteCreateOrConnectWithoutAlertasInput
    upsert?: EstudianteUpsertWithoutAlertasInput
    disconnect?: EstudianteWhereInput | boolean
    delete?: EstudianteWhereInput | boolean
    connect?: EstudianteWhereUniqueInput
    update?: XOR<XOR<EstudianteUpdateToOneWithWhereWithoutAlertasInput, EstudianteUpdateWithoutAlertasInput>, EstudianteUncheckedUpdateWithoutAlertasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CoordinadorCreateWithoutUsuarioInput = {
    departamento: string
  }

  export type CoordinadorUncheckedCreateWithoutUsuarioInput = {
    id?: number
    departamento: string
  }

  export type CoordinadorCreateOrConnectWithoutUsuarioInput = {
    where: CoordinadorWhereUniqueInput
    create: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput>
  }

  export type CoordinadorCreateManyUsuarioInputEnvelope = {
    data: CoordinadorCreateManyUsuarioInput | CoordinadorCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type EstudianteCreateWithoutUsuarioInput = {
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaCreateNestedManyWithoutEstudianteInput
    evaluaciones?: EvaluacionCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteUncheckedCreateWithoutUsuarioInput = {
    id?: number
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutEstudianteInput
    evaluaciones?: EvaluacionUncheckedCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteCreateOrConnectWithoutUsuarioInput = {
    where: EstudianteWhereUniqueInput
    create: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput>
  }

  export type EstudianteCreateManyUsuarioInputEnvelope = {
    data: EstudianteCreateManyUsuarioInput | EstudianteCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CoordinadorUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CoordinadorWhereUniqueInput
    update: XOR<CoordinadorUpdateWithoutUsuarioInput, CoordinadorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CoordinadorCreateWithoutUsuarioInput, CoordinadorUncheckedCreateWithoutUsuarioInput>
  }

  export type CoordinadorUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CoordinadorWhereUniqueInput
    data: XOR<CoordinadorUpdateWithoutUsuarioInput, CoordinadorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CoordinadorUpdateManyWithWhereWithoutUsuarioInput = {
    where: CoordinadorScalarWhereInput
    data: XOR<CoordinadorUpdateManyMutationInput, CoordinadorUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type CoordinadorScalarWhereInput = {
    AND?: CoordinadorScalarWhereInput | CoordinadorScalarWhereInput[]
    OR?: CoordinadorScalarWhereInput[]
    NOT?: CoordinadorScalarWhereInput | CoordinadorScalarWhereInput[]
    id?: IntFilter<"Coordinador"> | number
    usuarioId?: IntNullableFilter<"Coordinador"> | number | null
    departamento?: StringFilter<"Coordinador"> | string
  }

  export type EstudianteUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: EstudianteWhereUniqueInput
    update: XOR<EstudianteUpdateWithoutUsuarioInput, EstudianteUncheckedUpdateWithoutUsuarioInput>
    create: XOR<EstudianteCreateWithoutUsuarioInput, EstudianteUncheckedCreateWithoutUsuarioInput>
  }

  export type EstudianteUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: EstudianteWhereUniqueInput
    data: XOR<EstudianteUpdateWithoutUsuarioInput, EstudianteUncheckedUpdateWithoutUsuarioInput>
  }

  export type EstudianteUpdateManyWithWhereWithoutUsuarioInput = {
    where: EstudianteScalarWhereInput
    data: XOR<EstudianteUpdateManyMutationInput, EstudianteUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type EstudianteScalarWhereInput = {
    AND?: EstudianteScalarWhereInput | EstudianteScalarWhereInput[]
    OR?: EstudianteScalarWhereInput[]
    NOT?: EstudianteScalarWhereInput | EstudianteScalarWhereInput[]
    id?: IntFilter<"Estudiante"> | number
    usuarioId?: IntNullableFilter<"Estudiante"> | number | null
    carrera?: StringFilter<"Estudiante"> | string
    semestre?: IntFilter<"Estudiante"> | number
    nivelEstresActual?: IntNullableFilter<"Estudiante"> | number | null
    nivelBurnoutActual?: IntNullableFilter<"Estudiante"> | number | null
    estadoRiesgo?: StringNullableFilter<"Estudiante"> | string | null
    fechaUltimaEvaluacion?: DateTimeNullableFilter<"Estudiante"> | Date | string | null
  }

  export type AlertaCreateWithoutEstudianteInput = {
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type AlertaUncheckedCreateWithoutEstudianteInput = {
    id?: number
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type AlertaCreateOrConnectWithoutEstudianteInput = {
    where: AlertaWhereUniqueInput
    create: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput>
  }

  export type AlertaCreateManyEstudianteInputEnvelope = {
    data: AlertaCreateManyEstudianteInput | AlertaCreateManyEstudianteInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioCreateWithoutEstudianteInput = {
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    coordinador?: CoordinadorCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutEstudianteInput = {
    id?: number
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    coordinador?: CoordinadorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutEstudianteInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEstudianteInput, UsuarioUncheckedCreateWithoutEstudianteInput>
  }

  export type EvaluacionCreateWithoutEstudianteInput = {
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
  }

  export type EvaluacionUncheckedCreateWithoutEstudianteInput = {
    id?: number
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
  }

  export type EvaluacionCreateOrConnectWithoutEstudianteInput = {
    where: EvaluacionWhereUniqueInput
    create: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput>
  }

  export type EvaluacionCreateManyEstudianteInputEnvelope = {
    data: EvaluacionCreateManyEstudianteInput | EvaluacionCreateManyEstudianteInput[]
    skipDuplicates?: boolean
  }

  export type AlertaUpsertWithWhereUniqueWithoutEstudianteInput = {
    where: AlertaWhereUniqueInput
    update: XOR<AlertaUpdateWithoutEstudianteInput, AlertaUncheckedUpdateWithoutEstudianteInput>
    create: XOR<AlertaCreateWithoutEstudianteInput, AlertaUncheckedCreateWithoutEstudianteInput>
  }

  export type AlertaUpdateWithWhereUniqueWithoutEstudianteInput = {
    where: AlertaWhereUniqueInput
    data: XOR<AlertaUpdateWithoutEstudianteInput, AlertaUncheckedUpdateWithoutEstudianteInput>
  }

  export type AlertaUpdateManyWithWhereWithoutEstudianteInput = {
    where: AlertaScalarWhereInput
    data: XOR<AlertaUpdateManyMutationInput, AlertaUncheckedUpdateManyWithoutEstudianteInput>
  }

  export type AlertaScalarWhereInput = {
    AND?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
    OR?: AlertaScalarWhereInput[]
    NOT?: AlertaScalarWhereInput | AlertaScalarWhereInput[]
    id?: IntFilter<"Alerta"> | number
    estudianteId?: IntNullableFilter<"Alerta"> | number | null
    tipoAlerta?: StringFilter<"Alerta"> | string
    severidad?: StringFilter<"Alerta"> | string
    mensaje?: StringFilter<"Alerta"> | string
    estaLeida?: BoolNullableFilter<"Alerta"> | boolean | null
    fechaCreacion?: DateTimeNullableFilter<"Alerta"> | Date | string | null
  }

  export type UsuarioUpsertWithoutEstudianteInput = {
    update: XOR<UsuarioUpdateWithoutEstudianteInput, UsuarioUncheckedUpdateWithoutEstudianteInput>
    create: XOR<UsuarioCreateWithoutEstudianteInput, UsuarioUncheckedCreateWithoutEstudianteInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutEstudianteInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutEstudianteInput, UsuarioUncheckedUpdateWithoutEstudianteInput>
  }

  export type UsuarioUpdateWithoutEstudianteInput = {
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coordinador?: CoordinadorUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEstudianteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coordinador?: CoordinadorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type EvaluacionUpsertWithWhereUniqueWithoutEstudianteInput = {
    where: EvaluacionWhereUniqueInput
    update: XOR<EvaluacionUpdateWithoutEstudianteInput, EvaluacionUncheckedUpdateWithoutEstudianteInput>
    create: XOR<EvaluacionCreateWithoutEstudianteInput, EvaluacionUncheckedCreateWithoutEstudianteInput>
  }

  export type EvaluacionUpdateWithWhereUniqueWithoutEstudianteInput = {
    where: EvaluacionWhereUniqueInput
    data: XOR<EvaluacionUpdateWithoutEstudianteInput, EvaluacionUncheckedUpdateWithoutEstudianteInput>
  }

  export type EvaluacionUpdateManyWithWhereWithoutEstudianteInput = {
    where: EvaluacionScalarWhereInput
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyWithoutEstudianteInput>
  }

  export type EvaluacionScalarWhereInput = {
    AND?: EvaluacionScalarWhereInput | EvaluacionScalarWhereInput[]
    OR?: EvaluacionScalarWhereInput[]
    NOT?: EvaluacionScalarWhereInput | EvaluacionScalarWhereInput[]
    id?: IntFilter<"Evaluacion"> | number
    estudianteId?: IntNullableFilter<"Evaluacion"> | number | null
    puntajeEstres?: IntFilter<"Evaluacion"> | number
    puntajeBurnout?: IntFilter<"Evaluacion"> | number
    puntajeTotal?: IntFilter<"Evaluacion"> | number
    nivelRiesgo?: StringFilter<"Evaluacion"> | string
    respuestas?: JsonFilter<"Evaluacion">
    fechaEvaluacion?: DateTimeNullableFilter<"Evaluacion"> | Date | string | null
  }

  export type UsuarioCreateWithoutCoordinadorInput = {
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    estudiante?: EstudianteCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCoordinadorInput = {
    id?: number
    nombreCompleto: string
    correo: string
    contrasenaHash: string
    tipoUsuario: string
    fechaCreacion?: Date | string | null
    fechaActualizacion?: Date | string | null
    estudiante?: EstudianteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCoordinadorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCoordinadorInput, UsuarioUncheckedCreateWithoutCoordinadorInput>
  }

  export type UsuarioUpsertWithoutCoordinadorInput = {
    update: XOR<UsuarioUpdateWithoutCoordinadorInput, UsuarioUncheckedUpdateWithoutCoordinadorInput>
    create: XOR<UsuarioCreateWithoutCoordinadorInput, UsuarioUncheckedCreateWithoutCoordinadorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCoordinadorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCoordinadorInput, UsuarioUncheckedUpdateWithoutCoordinadorInput>
  }

  export type UsuarioUpdateWithoutCoordinadorInput = {
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estudiante?: EstudianteUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCoordinadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreCompleto?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    contrasenaHash?: StringFieldUpdateOperationsInput | string
    tipoUsuario?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estudiante?: EstudianteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type EstudianteCreateWithoutEvaluacionesInput = {
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaCreateNestedManyWithoutEstudianteInput
    usuario?: UsuarioCreateNestedOneWithoutEstudianteInput
  }

  export type EstudianteUncheckedCreateWithoutEvaluacionesInput = {
    id?: number
    usuarioId?: number | null
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    alertas?: AlertaUncheckedCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteCreateOrConnectWithoutEvaluacionesInput = {
    where: EstudianteWhereUniqueInput
    create: XOR<EstudianteCreateWithoutEvaluacionesInput, EstudianteUncheckedCreateWithoutEvaluacionesInput>
  }

  export type EstudianteUpsertWithoutEvaluacionesInput = {
    update: XOR<EstudianteUpdateWithoutEvaluacionesInput, EstudianteUncheckedUpdateWithoutEvaluacionesInput>
    create: XOR<EstudianteCreateWithoutEvaluacionesInput, EstudianteUncheckedCreateWithoutEvaluacionesInput>
    where?: EstudianteWhereInput
  }

  export type EstudianteUpdateToOneWithWhereWithoutEvaluacionesInput = {
    where?: EstudianteWhereInput
    data: XOR<EstudianteUpdateWithoutEvaluacionesInput, EstudianteUncheckedUpdateWithoutEvaluacionesInput>
  }

  export type EstudianteUpdateWithoutEvaluacionesInput = {
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUpdateManyWithoutEstudianteNestedInput
    usuario?: UsuarioUpdateOneWithoutEstudianteNestedInput
  }

  export type EstudianteUncheckedUpdateWithoutEvaluacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUncheckedUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteCreateWithoutAlertasInput = {
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    usuario?: UsuarioCreateNestedOneWithoutEstudianteInput
    evaluaciones?: EvaluacionCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteUncheckedCreateWithoutAlertasInput = {
    id?: number
    usuarioId?: number | null
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
    evaluaciones?: EvaluacionUncheckedCreateNestedManyWithoutEstudianteInput
  }

  export type EstudianteCreateOrConnectWithoutAlertasInput = {
    where: EstudianteWhereUniqueInput
    create: XOR<EstudianteCreateWithoutAlertasInput, EstudianteUncheckedCreateWithoutAlertasInput>
  }

  export type EstudianteUpsertWithoutAlertasInput = {
    update: XOR<EstudianteUpdateWithoutAlertasInput, EstudianteUncheckedUpdateWithoutAlertasInput>
    create: XOR<EstudianteCreateWithoutAlertasInput, EstudianteUncheckedCreateWithoutAlertasInput>
    where?: EstudianteWhereInput
  }

  export type EstudianteUpdateToOneWithWhereWithoutAlertasInput = {
    where?: EstudianteWhereInput
    data: XOR<EstudianteUpdateWithoutAlertasInput, EstudianteUncheckedUpdateWithoutAlertasInput>
  }

  export type EstudianteUpdateWithoutAlertasInput = {
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneWithoutEstudianteNestedInput
    evaluaciones?: EvaluacionUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteUncheckedUpdateWithoutAlertasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    evaluaciones?: EvaluacionUncheckedUpdateManyWithoutEstudianteNestedInput
  }

  export type CoordinadorCreateManyUsuarioInput = {
    id?: number
    departamento: string
  }

  export type EstudianteCreateManyUsuarioInput = {
    id?: number
    carrera: string
    semestre: number
    nivelEstresActual?: number | null
    nivelBurnoutActual?: number | null
    estadoRiesgo?: string | null
    fechaUltimaEvaluacion?: Date | string | null
  }

  export type CoordinadorUpdateWithoutUsuarioInput = {
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type CoordinadorUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type CoordinadorUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    departamento?: StringFieldUpdateOperationsInput | string
  }

  export type EstudianteUpdateWithoutUsuarioInput = {
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUpdateManyWithoutEstudianteNestedInput
    evaluaciones?: EvaluacionUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    alertas?: AlertaUncheckedUpdateManyWithoutEstudianteNestedInput
    evaluaciones?: EvaluacionUncheckedUpdateManyWithoutEstudianteNestedInput
  }

  export type EstudianteUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrera?: StringFieldUpdateOperationsInput | string
    semestre?: IntFieldUpdateOperationsInput | number
    nivelEstresActual?: NullableIntFieldUpdateOperationsInput | number | null
    nivelBurnoutActual?: NullableIntFieldUpdateOperationsInput | number | null
    estadoRiesgo?: NullableStringFieldUpdateOperationsInput | string | null
    fechaUltimaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaCreateManyEstudianteInput = {
    id?: number
    tipoAlerta: string
    severidad: string
    mensaje: string
    estaLeida?: boolean | null
    fechaCreacion?: Date | string | null
  }

  export type EvaluacionCreateManyEstudianteInput = {
    id?: number
    puntajeEstres: number
    puntajeBurnout: number
    puntajeTotal: number
    nivelRiesgo: string
    respuestas: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: Date | string | null
  }

  export type AlertaUpdateWithoutEstudianteInput = {
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaUncheckedUpdateWithoutEstudianteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertaUncheckedUpdateManyWithoutEstudianteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoAlerta?: StringFieldUpdateOperationsInput | string
    severidad?: StringFieldUpdateOperationsInput | string
    mensaje?: StringFieldUpdateOperationsInput | string
    estaLeida?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fechaCreacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvaluacionUpdateWithoutEstudianteInput = {
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvaluacionUncheckedUpdateWithoutEstudianteInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EvaluacionUncheckedUpdateManyWithoutEstudianteInput = {
    id?: IntFieldUpdateOperationsInput | number
    puntajeEstres?: IntFieldUpdateOperationsInput | number
    puntajeBurnout?: IntFieldUpdateOperationsInput | number
    puntajeTotal?: IntFieldUpdateOperationsInput | number
    nivelRiesgo?: StringFieldUpdateOperationsInput | string
    respuestas?: JsonNullValueInput | InputJsonValue
    fechaEvaluacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EstudianteCountOutputTypeDefaultArgs instead
     */
    export type EstudianteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstudianteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EstudianteDefaultArgs instead
     */
    export type EstudianteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstudianteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordinadorDefaultArgs instead
     */
    export type CoordinadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoordinadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EvaluacionDefaultArgs instead
     */
    export type EvaluacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EvaluacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertaDefaultArgs instead
     */
    export type AlertaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PreguntaEvaluacionDefaultArgs instead
     */
    export type PreguntaEvaluacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PreguntaEvaluacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecursoDefaultArgs instead
     */
    export type RecursoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecursoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}